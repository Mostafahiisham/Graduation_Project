
Vehicle_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d50  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001ee8  08001ef8  00011ef8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001ee8  08001ee8  00011ef8  2**0
                  CONTENTS
  4 .ARM          00000008  08001ee8  08001ee8  00011ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001ef0  08001ef8  00011ef8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ef0  08001ef0  00011ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ef4  08001ef4  00011ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011ef8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000054  20000000  08001ef8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000054  08001ef8  00020054  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011ef8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004211  00000000  00000000  00011f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001083  00000000  00000000  00016139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000608  00000000  00000000  000171c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000520  00000000  00000000  000177c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000109c  00000000  00000000  00017ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000034f0  00000000  00000000  00018d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080e39  00000000  00000000  0001c274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009d0ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016d8  00000000  00000000  0009d100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001ed0 	.word	0x08001ed0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08001ed0 	.word	0x08001ed0

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2f>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007ac:	bf24      	itt	cs
 80007ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007b6:	d90d      	bls.n	80007d4 <__aeabi_d2f+0x30>
 80007b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007d8:	d121      	bne.n	800081e <__aeabi_d2f+0x7a>
 80007da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007de:	bfbc      	itt	lt
 80007e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007e4:	4770      	bxlt	lr
 80007e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007ee:	f1c2 0218 	rsb	r2, r2, #24
 80007f2:	f1c2 0c20 	rsb	ip, r2, #32
 80007f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007fa:	fa20 f002 	lsr.w	r0, r0, r2
 80007fe:	bf18      	it	ne
 8000800:	f040 0001 	orrne.w	r0, r0, #1
 8000804:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000808:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800080c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000810:	ea40 000c 	orr.w	r0, r0, ip
 8000814:	fa23 f302 	lsr.w	r3, r3, r2
 8000818:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800081c:	e7cc      	b.n	80007b8 <__aeabi_d2f+0x14>
 800081e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000822:	d107      	bne.n	8000834 <__aeabi_d2f+0x90>
 8000824:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000828:	bf1e      	ittt	ne
 800082a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800082e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000832:	4770      	bxne	lr
 8000834:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000838:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800083c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <__aeabi_ldivmod>:
 8000844:	b97b      	cbnz	r3, 8000866 <__aeabi_ldivmod+0x22>
 8000846:	b972      	cbnz	r2, 8000866 <__aeabi_ldivmod+0x22>
 8000848:	2900      	cmp	r1, #0
 800084a:	bfbe      	ittt	lt
 800084c:	2000      	movlt	r0, #0
 800084e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000852:	e006      	blt.n	8000862 <__aeabi_ldivmod+0x1e>
 8000854:	bf08      	it	eq
 8000856:	2800      	cmpeq	r0, #0
 8000858:	bf1c      	itt	ne
 800085a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800085e:	f04f 30ff 	movne.w	r0, #4294967295
 8000862:	f000 b9bf 	b.w	8000be4 <__aeabi_idiv0>
 8000866:	f1ad 0c08 	sub.w	ip, sp, #8
 800086a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800086e:	2900      	cmp	r1, #0
 8000870:	db09      	blt.n	8000886 <__aeabi_ldivmod+0x42>
 8000872:	2b00      	cmp	r3, #0
 8000874:	db1a      	blt.n	80008ac <__aeabi_ldivmod+0x68>
 8000876:	f000 f84d 	bl	8000914 <__udivmoddi4>
 800087a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000882:	b004      	add	sp, #16
 8000884:	4770      	bx	lr
 8000886:	4240      	negs	r0, r0
 8000888:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800088c:	2b00      	cmp	r3, #0
 800088e:	db1b      	blt.n	80008c8 <__aeabi_ldivmod+0x84>
 8000890:	f000 f840 	bl	8000914 <__udivmoddi4>
 8000894:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000898:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800089c:	b004      	add	sp, #16
 800089e:	4240      	negs	r0, r0
 80008a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008a4:	4252      	negs	r2, r2
 80008a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008aa:	4770      	bx	lr
 80008ac:	4252      	negs	r2, r2
 80008ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008b2:	f000 f82f 	bl	8000914 <__udivmoddi4>
 80008b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008be:	b004      	add	sp, #16
 80008c0:	4240      	negs	r0, r0
 80008c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008c6:	4770      	bx	lr
 80008c8:	4252      	negs	r2, r2
 80008ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008ce:	f000 f821 	bl	8000914 <__udivmoddi4>
 80008d2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008da:	b004      	add	sp, #16
 80008dc:	4252      	negs	r2, r2
 80008de:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008e2:	4770      	bx	lr

080008e4 <__aeabi_uldivmod>:
 80008e4:	b953      	cbnz	r3, 80008fc <__aeabi_uldivmod+0x18>
 80008e6:	b94a      	cbnz	r2, 80008fc <__aeabi_uldivmod+0x18>
 80008e8:	2900      	cmp	r1, #0
 80008ea:	bf08      	it	eq
 80008ec:	2800      	cmpeq	r0, #0
 80008ee:	bf1c      	itt	ne
 80008f0:	f04f 31ff 	movne.w	r1, #4294967295
 80008f4:	f04f 30ff 	movne.w	r0, #4294967295
 80008f8:	f000 b974 	b.w	8000be4 <__aeabi_idiv0>
 80008fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000900:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000904:	f000 f806 	bl	8000914 <__udivmoddi4>
 8000908:	f8dd e004 	ldr.w	lr, [sp, #4]
 800090c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000910:	b004      	add	sp, #16
 8000912:	4770      	bx	lr

08000914 <__udivmoddi4>:
 8000914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000918:	9d08      	ldr	r5, [sp, #32]
 800091a:	4604      	mov	r4, r0
 800091c:	468e      	mov	lr, r1
 800091e:	2b00      	cmp	r3, #0
 8000920:	d14d      	bne.n	80009be <__udivmoddi4+0xaa>
 8000922:	428a      	cmp	r2, r1
 8000924:	4694      	mov	ip, r2
 8000926:	d969      	bls.n	80009fc <__udivmoddi4+0xe8>
 8000928:	fab2 f282 	clz	r2, r2
 800092c:	b152      	cbz	r2, 8000944 <__udivmoddi4+0x30>
 800092e:	fa01 f302 	lsl.w	r3, r1, r2
 8000932:	f1c2 0120 	rsb	r1, r2, #32
 8000936:	fa20 f101 	lsr.w	r1, r0, r1
 800093a:	fa0c fc02 	lsl.w	ip, ip, r2
 800093e:	ea41 0e03 	orr.w	lr, r1, r3
 8000942:	4094      	lsls	r4, r2
 8000944:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000948:	0c21      	lsrs	r1, r4, #16
 800094a:	fbbe f6f8 	udiv	r6, lr, r8
 800094e:	fa1f f78c 	uxth.w	r7, ip
 8000952:	fb08 e316 	mls	r3, r8, r6, lr
 8000956:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800095a:	fb06 f107 	mul.w	r1, r6, r7
 800095e:	4299      	cmp	r1, r3
 8000960:	d90a      	bls.n	8000978 <__udivmoddi4+0x64>
 8000962:	eb1c 0303 	adds.w	r3, ip, r3
 8000966:	f106 30ff 	add.w	r0, r6, #4294967295
 800096a:	f080 811f 	bcs.w	8000bac <__udivmoddi4+0x298>
 800096e:	4299      	cmp	r1, r3
 8000970:	f240 811c 	bls.w	8000bac <__udivmoddi4+0x298>
 8000974:	3e02      	subs	r6, #2
 8000976:	4463      	add	r3, ip
 8000978:	1a5b      	subs	r3, r3, r1
 800097a:	b2a4      	uxth	r4, r4
 800097c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000980:	fb08 3310 	mls	r3, r8, r0, r3
 8000984:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000988:	fb00 f707 	mul.w	r7, r0, r7
 800098c:	42a7      	cmp	r7, r4
 800098e:	d90a      	bls.n	80009a6 <__udivmoddi4+0x92>
 8000990:	eb1c 0404 	adds.w	r4, ip, r4
 8000994:	f100 33ff 	add.w	r3, r0, #4294967295
 8000998:	f080 810a 	bcs.w	8000bb0 <__udivmoddi4+0x29c>
 800099c:	42a7      	cmp	r7, r4
 800099e:	f240 8107 	bls.w	8000bb0 <__udivmoddi4+0x29c>
 80009a2:	4464      	add	r4, ip
 80009a4:	3802      	subs	r0, #2
 80009a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009aa:	1be4      	subs	r4, r4, r7
 80009ac:	2600      	movs	r6, #0
 80009ae:	b11d      	cbz	r5, 80009b8 <__udivmoddi4+0xa4>
 80009b0:	40d4      	lsrs	r4, r2
 80009b2:	2300      	movs	r3, #0
 80009b4:	e9c5 4300 	strd	r4, r3, [r5]
 80009b8:	4631      	mov	r1, r6
 80009ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009be:	428b      	cmp	r3, r1
 80009c0:	d909      	bls.n	80009d6 <__udivmoddi4+0xc2>
 80009c2:	2d00      	cmp	r5, #0
 80009c4:	f000 80ef 	beq.w	8000ba6 <__udivmoddi4+0x292>
 80009c8:	2600      	movs	r6, #0
 80009ca:	e9c5 0100 	strd	r0, r1, [r5]
 80009ce:	4630      	mov	r0, r6
 80009d0:	4631      	mov	r1, r6
 80009d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d6:	fab3 f683 	clz	r6, r3
 80009da:	2e00      	cmp	r6, #0
 80009dc:	d14a      	bne.n	8000a74 <__udivmoddi4+0x160>
 80009de:	428b      	cmp	r3, r1
 80009e0:	d302      	bcc.n	80009e8 <__udivmoddi4+0xd4>
 80009e2:	4282      	cmp	r2, r0
 80009e4:	f200 80f9 	bhi.w	8000bda <__udivmoddi4+0x2c6>
 80009e8:	1a84      	subs	r4, r0, r2
 80009ea:	eb61 0303 	sbc.w	r3, r1, r3
 80009ee:	2001      	movs	r0, #1
 80009f0:	469e      	mov	lr, r3
 80009f2:	2d00      	cmp	r5, #0
 80009f4:	d0e0      	beq.n	80009b8 <__udivmoddi4+0xa4>
 80009f6:	e9c5 4e00 	strd	r4, lr, [r5]
 80009fa:	e7dd      	b.n	80009b8 <__udivmoddi4+0xa4>
 80009fc:	b902      	cbnz	r2, 8000a00 <__udivmoddi4+0xec>
 80009fe:	deff      	udf	#255	; 0xff
 8000a00:	fab2 f282 	clz	r2, r2
 8000a04:	2a00      	cmp	r2, #0
 8000a06:	f040 8092 	bne.w	8000b2e <__udivmoddi4+0x21a>
 8000a0a:	eba1 010c 	sub.w	r1, r1, ip
 8000a0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a12:	fa1f fe8c 	uxth.w	lr, ip
 8000a16:	2601      	movs	r6, #1
 8000a18:	0c20      	lsrs	r0, r4, #16
 8000a1a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a1e:	fb07 1113 	mls	r1, r7, r3, r1
 8000a22:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a26:	fb0e f003 	mul.w	r0, lr, r3
 8000a2a:	4288      	cmp	r0, r1
 8000a2c:	d908      	bls.n	8000a40 <__udivmoddi4+0x12c>
 8000a2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a32:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a36:	d202      	bcs.n	8000a3e <__udivmoddi4+0x12a>
 8000a38:	4288      	cmp	r0, r1
 8000a3a:	f200 80cb 	bhi.w	8000bd4 <__udivmoddi4+0x2c0>
 8000a3e:	4643      	mov	r3, r8
 8000a40:	1a09      	subs	r1, r1, r0
 8000a42:	b2a4      	uxth	r4, r4
 8000a44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a48:	fb07 1110 	mls	r1, r7, r0, r1
 8000a4c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a50:	fb0e fe00 	mul.w	lr, lr, r0
 8000a54:	45a6      	cmp	lr, r4
 8000a56:	d908      	bls.n	8000a6a <__udivmoddi4+0x156>
 8000a58:	eb1c 0404 	adds.w	r4, ip, r4
 8000a5c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a60:	d202      	bcs.n	8000a68 <__udivmoddi4+0x154>
 8000a62:	45a6      	cmp	lr, r4
 8000a64:	f200 80bb 	bhi.w	8000bde <__udivmoddi4+0x2ca>
 8000a68:	4608      	mov	r0, r1
 8000a6a:	eba4 040e 	sub.w	r4, r4, lr
 8000a6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a72:	e79c      	b.n	80009ae <__udivmoddi4+0x9a>
 8000a74:	f1c6 0720 	rsb	r7, r6, #32
 8000a78:	40b3      	lsls	r3, r6
 8000a7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a82:	fa20 f407 	lsr.w	r4, r0, r7
 8000a86:	fa01 f306 	lsl.w	r3, r1, r6
 8000a8a:	431c      	orrs	r4, r3
 8000a8c:	40f9      	lsrs	r1, r7
 8000a8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a92:	fa00 f306 	lsl.w	r3, r0, r6
 8000a96:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a9a:	0c20      	lsrs	r0, r4, #16
 8000a9c:	fa1f fe8c 	uxth.w	lr, ip
 8000aa0:	fb09 1118 	mls	r1, r9, r8, r1
 8000aa4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000aa8:	fb08 f00e 	mul.w	r0, r8, lr
 8000aac:	4288      	cmp	r0, r1
 8000aae:	fa02 f206 	lsl.w	r2, r2, r6
 8000ab2:	d90b      	bls.n	8000acc <__udivmoddi4+0x1b8>
 8000ab4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ab8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000abc:	f080 8088 	bcs.w	8000bd0 <__udivmoddi4+0x2bc>
 8000ac0:	4288      	cmp	r0, r1
 8000ac2:	f240 8085 	bls.w	8000bd0 <__udivmoddi4+0x2bc>
 8000ac6:	f1a8 0802 	sub.w	r8, r8, #2
 8000aca:	4461      	add	r1, ip
 8000acc:	1a09      	subs	r1, r1, r0
 8000ace:	b2a4      	uxth	r4, r4
 8000ad0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ad4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ad8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000adc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ae0:	458e      	cmp	lr, r1
 8000ae2:	d908      	bls.n	8000af6 <__udivmoddi4+0x1e2>
 8000ae4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ae8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aec:	d26c      	bcs.n	8000bc8 <__udivmoddi4+0x2b4>
 8000aee:	458e      	cmp	lr, r1
 8000af0:	d96a      	bls.n	8000bc8 <__udivmoddi4+0x2b4>
 8000af2:	3802      	subs	r0, #2
 8000af4:	4461      	add	r1, ip
 8000af6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000afa:	fba0 9402 	umull	r9, r4, r0, r2
 8000afe:	eba1 010e 	sub.w	r1, r1, lr
 8000b02:	42a1      	cmp	r1, r4
 8000b04:	46c8      	mov	r8, r9
 8000b06:	46a6      	mov	lr, r4
 8000b08:	d356      	bcc.n	8000bb8 <__udivmoddi4+0x2a4>
 8000b0a:	d053      	beq.n	8000bb4 <__udivmoddi4+0x2a0>
 8000b0c:	b15d      	cbz	r5, 8000b26 <__udivmoddi4+0x212>
 8000b0e:	ebb3 0208 	subs.w	r2, r3, r8
 8000b12:	eb61 010e 	sbc.w	r1, r1, lr
 8000b16:	fa01 f707 	lsl.w	r7, r1, r7
 8000b1a:	fa22 f306 	lsr.w	r3, r2, r6
 8000b1e:	40f1      	lsrs	r1, r6
 8000b20:	431f      	orrs	r7, r3
 8000b22:	e9c5 7100 	strd	r7, r1, [r5]
 8000b26:	2600      	movs	r6, #0
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	f1c2 0320 	rsb	r3, r2, #32
 8000b32:	40d8      	lsrs	r0, r3
 8000b34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b38:	fa21 f303 	lsr.w	r3, r1, r3
 8000b3c:	4091      	lsls	r1, r2
 8000b3e:	4301      	orrs	r1, r0
 8000b40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b44:	fa1f fe8c 	uxth.w	lr, ip
 8000b48:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b4c:	fb07 3610 	mls	r6, r7, r0, r3
 8000b50:	0c0b      	lsrs	r3, r1, #16
 8000b52:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b56:	fb00 f60e 	mul.w	r6, r0, lr
 8000b5a:	429e      	cmp	r6, r3
 8000b5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000b60:	d908      	bls.n	8000b74 <__udivmoddi4+0x260>
 8000b62:	eb1c 0303 	adds.w	r3, ip, r3
 8000b66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b6a:	d22f      	bcs.n	8000bcc <__udivmoddi4+0x2b8>
 8000b6c:	429e      	cmp	r6, r3
 8000b6e:	d92d      	bls.n	8000bcc <__udivmoddi4+0x2b8>
 8000b70:	3802      	subs	r0, #2
 8000b72:	4463      	add	r3, ip
 8000b74:	1b9b      	subs	r3, r3, r6
 8000b76:	b289      	uxth	r1, r1
 8000b78:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b7c:	fb07 3316 	mls	r3, r7, r6, r3
 8000b80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b84:	fb06 f30e 	mul.w	r3, r6, lr
 8000b88:	428b      	cmp	r3, r1
 8000b8a:	d908      	bls.n	8000b9e <__udivmoddi4+0x28a>
 8000b8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b90:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b94:	d216      	bcs.n	8000bc4 <__udivmoddi4+0x2b0>
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d914      	bls.n	8000bc4 <__udivmoddi4+0x2b0>
 8000b9a:	3e02      	subs	r6, #2
 8000b9c:	4461      	add	r1, ip
 8000b9e:	1ac9      	subs	r1, r1, r3
 8000ba0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ba4:	e738      	b.n	8000a18 <__udivmoddi4+0x104>
 8000ba6:	462e      	mov	r6, r5
 8000ba8:	4628      	mov	r0, r5
 8000baa:	e705      	b.n	80009b8 <__udivmoddi4+0xa4>
 8000bac:	4606      	mov	r6, r0
 8000bae:	e6e3      	b.n	8000978 <__udivmoddi4+0x64>
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	e6f8      	b.n	80009a6 <__udivmoddi4+0x92>
 8000bb4:	454b      	cmp	r3, r9
 8000bb6:	d2a9      	bcs.n	8000b0c <__udivmoddi4+0x1f8>
 8000bb8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bbc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000bc0:	3801      	subs	r0, #1
 8000bc2:	e7a3      	b.n	8000b0c <__udivmoddi4+0x1f8>
 8000bc4:	4646      	mov	r6, r8
 8000bc6:	e7ea      	b.n	8000b9e <__udivmoddi4+0x28a>
 8000bc8:	4620      	mov	r0, r4
 8000bca:	e794      	b.n	8000af6 <__udivmoddi4+0x1e2>
 8000bcc:	4640      	mov	r0, r8
 8000bce:	e7d1      	b.n	8000b74 <__udivmoddi4+0x260>
 8000bd0:	46d0      	mov	r8, sl
 8000bd2:	e77b      	b.n	8000acc <__udivmoddi4+0x1b8>
 8000bd4:	3b02      	subs	r3, #2
 8000bd6:	4461      	add	r1, ip
 8000bd8:	e732      	b.n	8000a40 <__udivmoddi4+0x12c>
 8000bda:	4630      	mov	r0, r6
 8000bdc:	e709      	b.n	80009f2 <__udivmoddi4+0xde>
 8000bde:	4464      	add	r4, ip
 8000be0:	3802      	subs	r0, #2
 8000be2:	e742      	b.n	8000a6a <__udivmoddi4+0x156>

08000be4 <__aeabi_idiv0>:
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <RCC_VInit>:
#include<MRCC_Cfg.h>
/***************************************************************************************************************************/
				/*****A Function To Initialize The System Clock State*****/
/***************************************************************************************************************************/
void RCC_VInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
	/*choose internal or external clock source for the system*/
#if	SYSTEM_CLK	== HSI_Clk
	SET_BIT(RCC->RCC_CR,HSI_ON);
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <RCC_VInit+0x44>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <RCC_VInit+0x44>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	6013      	str	r3, [r2, #0]
	/*wait for flag */
	while(!GET_BIT(RCC->RCC_CR,HSI_RDY));		// while not equal one
 8000bf8:	bf00      	nop
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <RCC_VInit+0x44>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	085b      	lsrs	r3, r3, #1
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d0f8      	beq.n	8000bfa <RCC_VInit+0x12>
	/*Select System Clock */
	RCC->RCC_CFGR = (RCC->RCC_CFGR & RCC_CFGR_MASK) | (SW_CLK);
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <RCC_VInit+0x44>)
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <RCC_VInit+0x44>)
 8000c0e:	f023 0303 	bic.w	r3, r3, #3
 8000c12:	6093      	str	r3, [r2, #8]
#endif
	//BYPASS PIN
#if HSE_TYPE == External_Clk
		CLR_BIT(RCC->RCC_CR,HSE_BYP);
#elif HSE_TYPE == RC_Clk
		SET_BIT(RCC->RCC_CR,HSE_BYP);
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <RCC_VInit+0x44>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <RCC_VInit+0x44>)
 8000c1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c1e:	6013      	str	r3, [r2, #0]
#else
	#error"Undefined Clk Type";
#endif
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40023800 	.word	0x40023800

08000c30 <RCC_VEnableClkPeripheral>:
/***************************************************************************************************************************/
				/*****A Function To Enable The Peripherals Clock*****/
/***************************************************************************************************************************/
void RCC_VEnableClkPeripheral(Base_Type Copy_AddressBus,u8 Copy_u8Peripheral)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	460a      	mov	r2, r1
 8000c3a:	71fb      	strb	r3, [r7, #7]
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	71bb      	strb	r3, [r7, #6]
	switch(Copy_AddressBus)
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	2b07      	cmp	r3, #7
 8000c44:	d86a      	bhi.n	8000d1c <RCC_VEnableClkPeripheral+0xec>
 8000c46:	a201      	add	r2, pc, #4	; (adr r2, 8000c4c <RCC_VEnableClkPeripheral+0x1c>)
 8000c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c4c:	08000c6d 	.word	0x08000c6d
 8000c50:	08000c83 	.word	0x08000c83
 8000c54:	08000c99 	.word	0x08000c99
 8000c58:	08000caf 	.word	0x08000caf
 8000c5c:	08000cc5 	.word	0x08000cc5
 8000c60:	08000cdb 	.word	0x08000cdb
 8000c64:	08000cf1 	.word	0x08000cf1
 8000c68:	08000d07 	.word	0x08000d07
		{
		case AHB1ENR:
			SET_BIT(RCC->RCC_AHB1ENR,Copy_u8Peripheral);
 8000c6c:	4b2f      	ldr	r3, [pc, #188]	; (8000d2c <RCC_VEnableClkPeripheral+0xfc>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c70:	79ba      	ldrb	r2, [r7, #6]
 8000c72:	2101      	movs	r1, #1
 8000c74:	fa01 f202 	lsl.w	r2, r1, r2
 8000c78:	4611      	mov	r1, r2
 8000c7a:	4a2c      	ldr	r2, [pc, #176]	; (8000d2c <RCC_VEnableClkPeripheral+0xfc>)
 8000c7c:	430b      	orrs	r3, r1
 8000c7e:	6313      	str	r3, [r2, #48]	; 0x30
			break;
 8000c80:	e04d      	b.n	8000d1e <RCC_VEnableClkPeripheral+0xee>
		case AHB2ENR:
			SET_BIT(RCC->RCC_AHB2ENR,Copy_u8Peripheral);
 8000c82:	4b2a      	ldr	r3, [pc, #168]	; (8000d2c <RCC_VEnableClkPeripheral+0xfc>)
 8000c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c86:	79ba      	ldrb	r2, [r7, #6]
 8000c88:	2101      	movs	r1, #1
 8000c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c8e:	4611      	mov	r1, r2
 8000c90:	4a26      	ldr	r2, [pc, #152]	; (8000d2c <RCC_VEnableClkPeripheral+0xfc>)
 8000c92:	430b      	orrs	r3, r1
 8000c94:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8000c96:	e042      	b.n	8000d1e <RCC_VEnableClkPeripheral+0xee>
		case APB1ENR:
			SET_BIT(RCC->RCC_APB1ENR,Copy_u8Peripheral) ;
 8000c98:	4b24      	ldr	r3, [pc, #144]	; (8000d2c <RCC_VEnableClkPeripheral+0xfc>)
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9c:	79ba      	ldrb	r2, [r7, #6]
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	4a21      	ldr	r2, [pc, #132]	; (8000d2c <RCC_VEnableClkPeripheral+0xfc>)
 8000ca8:	430b      	orrs	r3, r1
 8000caa:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8000cac:	e037      	b.n	8000d1e <RCC_VEnableClkPeripheral+0xee>
		case APB2ENR:
			SET_BIT(RCC->RCC_APB2ENR,Copy_u8Peripheral) ;
 8000cae:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <RCC_VEnableClkPeripheral+0xfc>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	79ba      	ldrb	r2, [r7, #6]
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cba:	4611      	mov	r1, r2
 8000cbc:	4a1b      	ldr	r2, [pc, #108]	; (8000d2c <RCC_VEnableClkPeripheral+0xfc>)
 8000cbe:	430b      	orrs	r3, r1
 8000cc0:	6453      	str	r3, [r2, #68]	; 0x44
			break;
 8000cc2:	e02c      	b.n	8000d1e <RCC_VEnableClkPeripheral+0xee>
		case AHB1LPENR:
			SET_BIT(RCC->RCC_AHB1LPENR,Copy_u8Peripheral) ;
 8000cc4:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <RCC_VEnableClkPeripheral+0xfc>)
 8000cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cc8:	79ba      	ldrb	r2, [r7, #6]
 8000cca:	2101      	movs	r1, #1
 8000ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	4a16      	ldr	r2, [pc, #88]	; (8000d2c <RCC_VEnableClkPeripheral+0xfc>)
 8000cd4:	430b      	orrs	r3, r1
 8000cd6:	6513      	str	r3, [r2, #80]	; 0x50
			break;
 8000cd8:	e021      	b.n	8000d1e <RCC_VEnableClkPeripheral+0xee>
		case AHB2LPENR:
			SET_BIT(RCC->RCC_AHB2LPENR,Copy_u8Peripheral);
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <RCC_VEnableClkPeripheral+0xfc>)
 8000cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cde:	79ba      	ldrb	r2, [r7, #6]
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	4a10      	ldr	r2, [pc, #64]	; (8000d2c <RCC_VEnableClkPeripheral+0xfc>)
 8000cea:	430b      	orrs	r3, r1
 8000cec:	6553      	str	r3, [r2, #84]	; 0x54
			break;
 8000cee:	e016      	b.n	8000d1e <RCC_VEnableClkPeripheral+0xee>
		case APB1LPENR:
			SET_BIT(RCC->RCC_APB1LPENR,Copy_u8Peripheral) ;
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <RCC_VEnableClkPeripheral+0xfc>)
 8000cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf4:	79ba      	ldrb	r2, [r7, #6]
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cfc:	4611      	mov	r1, r2
 8000cfe:	4a0b      	ldr	r2, [pc, #44]	; (8000d2c <RCC_VEnableClkPeripheral+0xfc>)
 8000d00:	430b      	orrs	r3, r1
 8000d02:	6613      	str	r3, [r2, #96]	; 0x60
			break;
 8000d04:	e00b      	b.n	8000d1e <RCC_VEnableClkPeripheral+0xee>
		case APB2LPENR:
			SET_BIT(RCC->RCC_APB2LPENR,Copy_u8Peripheral) ;
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <RCC_VEnableClkPeripheral+0xfc>)
 8000d08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000d0a:	79ba      	ldrb	r2, [r7, #6]
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d12:	4611      	mov	r1, r2
 8000d14:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <RCC_VEnableClkPeripheral+0xfc>)
 8000d16:	430b      	orrs	r3, r1
 8000d18:	6653      	str	r3, [r2, #100]	; 0x64
			break;
 8000d1a:	e000      	b.n	8000d1e <RCC_VEnableClkPeripheral+0xee>
		default:
			break;
 8000d1c:	bf00      	nop

		}
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800

08000d30 <GPIO_SetMode>:

/***************************************************************************************************************************/
						/*****This Function To Set The GPIO Port Mode*****/
/***************************************************************************************************************************/
void GPIO_SetMode(PORT_t Port,PIN_Number Pin,Mode_t Mode)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	71bb      	strb	r3, [r7, #6]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	717b      	strb	r3, [r7, #5]

	switch(Port)
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d036      	beq.n	8000db6 <GPIO_SetMode+0x86>
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	dc4c      	bgt.n	8000de6 <GPIO_SetMode+0xb6>
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d002      	beq.n	8000d56 <GPIO_SetMode+0x26>
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d018      	beq.n	8000d86 <GPIO_SetMode+0x56>
	case PORTC:
		GPIOC->MODER	&=~ (MODE_MUSK <<(Pin*MODE_BIT_ACCESS));
		GPIOC->MODER  	|=  (Mode<<(Pin*MODE_BIT_ACCESS));
		break;
	default:
		break;
 8000d54:	e047      	b.n	8000de6 <GPIO_SetMode+0xb6>
		GPIOA->MODER	&=~ (MODE_MUSK <<(Pin*MODE_BIT_ACCESS));		// BIT MASK
 8000d56:	4b27      	ldr	r3, [pc, #156]	; (8000df4 <GPIO_SetMode+0xc4>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	79ba      	ldrb	r2, [r7, #6]
 8000d5c:	0052      	lsls	r2, r2, #1
 8000d5e:	2103      	movs	r1, #3
 8000d60:	fa01 f202 	lsl.w	r2, r1, r2
 8000d64:	43d2      	mvns	r2, r2
 8000d66:	4611      	mov	r1, r2
 8000d68:	4a22      	ldr	r2, [pc, #136]	; (8000df4 <GPIO_SetMode+0xc4>)
 8000d6a:	400b      	ands	r3, r1
 8000d6c:	6013      	str	r3, [r2, #0]
		GPIOA->MODER  	|=  (Mode<<(Pin*MODE_BIT_ACCESS));				//set the bit mode
 8000d6e:	4b21      	ldr	r3, [pc, #132]	; (8000df4 <GPIO_SetMode+0xc4>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	7979      	ldrb	r1, [r7, #5]
 8000d74:	79ba      	ldrb	r2, [r7, #6]
 8000d76:	0052      	lsls	r2, r2, #1
 8000d78:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	4a1d      	ldr	r2, [pc, #116]	; (8000df4 <GPIO_SetMode+0xc4>)
 8000d80:	430b      	orrs	r3, r1
 8000d82:	6013      	str	r3, [r2, #0]
		break;
 8000d84:	e030      	b.n	8000de8 <GPIO_SetMode+0xb8>
		GPIOB->MODER	&=~ (MODE_MUSK <<(Pin*MODE_BIT_ACCESS));
 8000d86:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <GPIO_SetMode+0xc8>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	79ba      	ldrb	r2, [r7, #6]
 8000d8c:	0052      	lsls	r2, r2, #1
 8000d8e:	2103      	movs	r1, #3
 8000d90:	fa01 f202 	lsl.w	r2, r1, r2
 8000d94:	43d2      	mvns	r2, r2
 8000d96:	4611      	mov	r1, r2
 8000d98:	4a17      	ldr	r2, [pc, #92]	; (8000df8 <GPIO_SetMode+0xc8>)
 8000d9a:	400b      	ands	r3, r1
 8000d9c:	6013      	str	r3, [r2, #0]
		GPIOB->MODER  	|=  (Mode<<(Pin*MODE_BIT_ACCESS));
 8000d9e:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <GPIO_SetMode+0xc8>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	7979      	ldrb	r1, [r7, #5]
 8000da4:	79ba      	ldrb	r2, [r7, #6]
 8000da6:	0052      	lsls	r2, r2, #1
 8000da8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dac:	4611      	mov	r1, r2
 8000dae:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <GPIO_SetMode+0xc8>)
 8000db0:	430b      	orrs	r3, r1
 8000db2:	6013      	str	r3, [r2, #0]
		break;
 8000db4:	e018      	b.n	8000de8 <GPIO_SetMode+0xb8>
		GPIOC->MODER	&=~ (MODE_MUSK <<(Pin*MODE_BIT_ACCESS));
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <GPIO_SetMode+0xcc>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	79ba      	ldrb	r2, [r7, #6]
 8000dbc:	0052      	lsls	r2, r2, #1
 8000dbe:	2103      	movs	r1, #3
 8000dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc4:	43d2      	mvns	r2, r2
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	4a0c      	ldr	r2, [pc, #48]	; (8000dfc <GPIO_SetMode+0xcc>)
 8000dca:	400b      	ands	r3, r1
 8000dcc:	6013      	str	r3, [r2, #0]
		GPIOC->MODER  	|=  (Mode<<(Pin*MODE_BIT_ACCESS));
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <GPIO_SetMode+0xcc>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	7979      	ldrb	r1, [r7, #5]
 8000dd4:	79ba      	ldrb	r2, [r7, #6]
 8000dd6:	0052      	lsls	r2, r2, #1
 8000dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ddc:	4611      	mov	r1, r2
 8000dde:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <GPIO_SetMode+0xcc>)
 8000de0:	430b      	orrs	r3, r1
 8000de2:	6013      	str	r3, [r2, #0]
		break;
 8000de4:	e000      	b.n	8000de8 <GPIO_SetMode+0xb8>
		break;
 8000de6:	bf00      	nop


	}

}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	40020000 	.word	0x40020000
 8000df8:	40020400 	.word	0x40020400
 8000dfc:	40020800 	.word	0x40020800

08000e00 <GPIO_SetPinValue>:
}
/***************************************************************************************************************************/
							/*****To Set The GPIO Port Pin Value Is High Or Low*****/
/***************************************************************************************************************************/
void GPIO_SetPinValue(PORT_t Port,PIN_Number Pin,PIN_Value P_Value)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	71bb      	strb	r3, [r7, #6]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	717b      	strb	r3, [r7, #5]
	switch(Port)
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d032      	beq.n	8000e7e <GPIO_SetPinValue+0x7e>
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	dc46      	bgt.n	8000eaa <GPIO_SetPinValue+0xaa>
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d002      	beq.n	8000e26 <GPIO_SetPinValue+0x26>
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d016      	beq.n	8000e52 <GPIO_SetPinValue+0x52>
		case PORTC:
			GPIOC->ODR	&=~ (1<<(Pin));
			GPIOC->ODR  |=  (P_Value<<(Pin));
			break;
		default:
			break;
 8000e24:	e041      	b.n	8000eaa <GPIO_SetPinValue+0xaa>
			GPIOA->ODR	&=~ (1<<(Pin));			//clear bits
 8000e26:	4b24      	ldr	r3, [pc, #144]	; (8000eb8 <GPIO_SetPinValue+0xb8>)
 8000e28:	695b      	ldr	r3, [r3, #20]
 8000e2a:	79ba      	ldrb	r2, [r7, #6]
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e32:	43d2      	mvns	r2, r2
 8000e34:	4611      	mov	r1, r2
 8000e36:	4a20      	ldr	r2, [pc, #128]	; (8000eb8 <GPIO_SetPinValue+0xb8>)
 8000e38:	400b      	ands	r3, r1
 8000e3a:	6153      	str	r3, [r2, #20]
			GPIOA->ODR 	|=  (P_Value<<(Pin));				//set the bit mode
 8000e3c:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <GPIO_SetPinValue+0xb8>)
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	7979      	ldrb	r1, [r7, #5]
 8000e42:	79ba      	ldrb	r2, [r7, #6]
 8000e44:	fa01 f202 	lsl.w	r2, r1, r2
 8000e48:	4611      	mov	r1, r2
 8000e4a:	4a1b      	ldr	r2, [pc, #108]	; (8000eb8 <GPIO_SetPinValue+0xb8>)
 8000e4c:	430b      	orrs	r3, r1
 8000e4e:	6153      	str	r3, [r2, #20]
			break;
 8000e50:	e02c      	b.n	8000eac <GPIO_SetPinValue+0xac>
			GPIOB->ODR	&=~ (1<<(Pin));
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <GPIO_SetPinValue+0xbc>)
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	79ba      	ldrb	r2, [r7, #6]
 8000e58:	2101      	movs	r1, #1
 8000e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e5e:	43d2      	mvns	r2, r2
 8000e60:	4611      	mov	r1, r2
 8000e62:	4a16      	ldr	r2, [pc, #88]	; (8000ebc <GPIO_SetPinValue+0xbc>)
 8000e64:	400b      	ands	r3, r1
 8000e66:	6153      	str	r3, [r2, #20]
			GPIOB->ODR 	|=  (P_Value<<(Pin));
 8000e68:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <GPIO_SetPinValue+0xbc>)
 8000e6a:	695b      	ldr	r3, [r3, #20]
 8000e6c:	7979      	ldrb	r1, [r7, #5]
 8000e6e:	79ba      	ldrb	r2, [r7, #6]
 8000e70:	fa01 f202 	lsl.w	r2, r1, r2
 8000e74:	4611      	mov	r1, r2
 8000e76:	4a11      	ldr	r2, [pc, #68]	; (8000ebc <GPIO_SetPinValue+0xbc>)
 8000e78:	430b      	orrs	r3, r1
 8000e7a:	6153      	str	r3, [r2, #20]
			break;
 8000e7c:	e016      	b.n	8000eac <GPIO_SetPinValue+0xac>
			GPIOC->ODR	&=~ (1<<(Pin));
 8000e7e:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <GPIO_SetPinValue+0xc0>)
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	79ba      	ldrb	r2, [r7, #6]
 8000e84:	2101      	movs	r1, #1
 8000e86:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8a:	43d2      	mvns	r2, r2
 8000e8c:	4611      	mov	r1, r2
 8000e8e:	4a0c      	ldr	r2, [pc, #48]	; (8000ec0 <GPIO_SetPinValue+0xc0>)
 8000e90:	400b      	ands	r3, r1
 8000e92:	6153      	str	r3, [r2, #20]
			GPIOC->ODR  |=  (P_Value<<(Pin));
 8000e94:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <GPIO_SetPinValue+0xc0>)
 8000e96:	695b      	ldr	r3, [r3, #20]
 8000e98:	7979      	ldrb	r1, [r7, #5]
 8000e9a:	79ba      	ldrb	r2, [r7, #6]
 8000e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <GPIO_SetPinValue+0xc0>)
 8000ea4:	430b      	orrs	r3, r1
 8000ea6:	6153      	str	r3, [r2, #20]
			break;
 8000ea8:	e000      	b.n	8000eac <GPIO_SetPinValue+0xac>
			break;
 8000eaa:	bf00      	nop
		}
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	40020000 	.word	0x40020000
 8000ebc:	40020400 	.word	0x40020400
 8000ec0:	40020800 	.word	0x40020800

08000ec4 <GPIO_SetAlternateFunc>:
}
/***************************************************************************************************************************/
					/****To Set The GPIO Port Pin ALTERNATE FUNCTION MODE *****/
/***************************************************************************************************************************/
void GPIO_SetAlternateFunc(PORT_t Port,PIN_Number Pin,AlterFunc_Number AF_Number)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
 8000ece:	460b      	mov	r3, r1
 8000ed0:	71bb      	strb	r3, [r7, #6]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	717b      	strb	r3, [r7, #5]
	u8 REG_Number = Pin / 8;
 8000ed6:	79bb      	ldrb	r3, [r7, #6]
 8000ed8:	08db      	lsrs	r3, r3, #3
 8000eda:	73fb      	strb	r3, [r7, #15]
	u8 Bit_Number = (Pin % 8);
 8000edc:	79bb      	ldrb	r3, [r7, #6]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	73bb      	strb	r3, [r7, #14]
	switch(Port)
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d04e      	beq.n	8000f88 <GPIO_SetAlternateFunc+0xc4>
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	dc70      	bgt.n	8000fd0 <GPIO_SetAlternateFunc+0x10c>
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d002      	beq.n	8000ef8 <GPIO_SetAlternateFunc+0x34>
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d024      	beq.n	8000f40 <GPIO_SetAlternateFunc+0x7c>
	case PORTC:
		GPIOC->AFR[REG_Number] &=~(AFR_MUSK<<Bit_Number*AFR_BIT_ACCESS);
		GPIOC->AFR[REG_Number] |=( AF_Number<<Bit_Number*AFR_BIT_ACCESS);
		break;
	}
}
 8000ef6:	e06b      	b.n	8000fd0 <GPIO_SetAlternateFunc+0x10c>
		GPIOA->AFR[REG_Number] &=~(AFR_MUSK<<Bit_Number*AFR_BIT_ACCESS);
 8000ef8:	4a38      	ldr	r2, [pc, #224]	; (8000fdc <GPIO_SetAlternateFunc+0x118>)
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	3308      	adds	r3, #8
 8000efe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f02:	7bbb      	ldrb	r3, [r7, #14]
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	210f      	movs	r1, #15
 8000f08:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	4932      	ldr	r1, [pc, #200]	; (8000fdc <GPIO_SetAlternateFunc+0x118>)
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	4002      	ands	r2, r0
 8000f16:	3308      	adds	r3, #8
 8000f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		GPIOA->AFR[REG_Number] |=(AF_Number<<Bit_Number*AFR_BIT_ACCESS);
 8000f1c:	4a2f      	ldr	r2, [pc, #188]	; (8000fdc <GPIO_SetAlternateFunc+0x118>)
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
 8000f20:	3308      	adds	r3, #8
 8000f22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f26:	7979      	ldrb	r1, [r7, #5]
 8000f28:	7bbb      	ldrb	r3, [r7, #14]
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f30:	4618      	mov	r0, r3
 8000f32:	492a      	ldr	r1, [pc, #168]	; (8000fdc <GPIO_SetAlternateFunc+0x118>)
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	4302      	orrs	r2, r0
 8000f38:	3308      	adds	r3, #8
 8000f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8000f3e:	e047      	b.n	8000fd0 <GPIO_SetAlternateFunc+0x10c>
		GPIOB->AFR[REG_Number] &=~(AFR_MUSK<<Bit_Number*AFR_BIT_ACCESS);
 8000f40:	4a27      	ldr	r2, [pc, #156]	; (8000fe0 <GPIO_SetAlternateFunc+0x11c>)
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	3308      	adds	r3, #8
 8000f46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f4a:	7bbb      	ldrb	r3, [r7, #14]
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	210f      	movs	r1, #15
 8000f50:	fa01 f303 	lsl.w	r3, r1, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	4921      	ldr	r1, [pc, #132]	; (8000fe0 <GPIO_SetAlternateFunc+0x11c>)
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	4002      	ands	r2, r0
 8000f5e:	3308      	adds	r3, #8
 8000f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		GPIOB->AFR[REG_Number] |=( AF_Number<<Bit_Number*AFR_BIT_ACCESS);
 8000f64:	4a1e      	ldr	r2, [pc, #120]	; (8000fe0 <GPIO_SetAlternateFunc+0x11c>)
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	3308      	adds	r3, #8
 8000f6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f6e:	7979      	ldrb	r1, [r7, #5]
 8000f70:	7bbb      	ldrb	r3, [r7, #14]
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	fa01 f303 	lsl.w	r3, r1, r3
 8000f78:	4618      	mov	r0, r3
 8000f7a:	4919      	ldr	r1, [pc, #100]	; (8000fe0 <GPIO_SetAlternateFunc+0x11c>)
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	4302      	orrs	r2, r0
 8000f80:	3308      	adds	r3, #8
 8000f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8000f86:	e023      	b.n	8000fd0 <GPIO_SetAlternateFunc+0x10c>
		GPIOC->AFR[REG_Number] &=~(AFR_MUSK<<Bit_Number*AFR_BIT_ACCESS);
 8000f88:	4a16      	ldr	r2, [pc, #88]	; (8000fe4 <GPIO_SetAlternateFunc+0x120>)
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	3308      	adds	r3, #8
 8000f8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f92:	7bbb      	ldrb	r3, [r7, #14]
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	210f      	movs	r1, #15
 8000f98:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	4910      	ldr	r1, [pc, #64]	; (8000fe4 <GPIO_SetAlternateFunc+0x120>)
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	4002      	ands	r2, r0
 8000fa6:	3308      	adds	r3, #8
 8000fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		GPIOC->AFR[REG_Number] |=( AF_Number<<Bit_Number*AFR_BIT_ACCESS);
 8000fac:	4a0d      	ldr	r2, [pc, #52]	; (8000fe4 <GPIO_SetAlternateFunc+0x120>)
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	3308      	adds	r3, #8
 8000fb2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fb6:	7979      	ldrb	r1, [r7, #5]
 8000fb8:	7bbb      	ldrb	r3, [r7, #14]
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	4908      	ldr	r1, [pc, #32]	; (8000fe4 <GPIO_SetAlternateFunc+0x120>)
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	4302      	orrs	r2, r0
 8000fc8:	3308      	adds	r3, #8
 8000fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8000fce:	bf00      	nop
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	40020000 	.word	0x40020000
 8000fe0:	40020400 	.word	0x40020400
 8000fe4:	40020800 	.word	0x40020800

08000fe8 <STP_ShiftData>:

	GPIO_SetMode(STP_PORT,LATCH_PIN,OUTPUT);
	GPIO_SetOutputMode(STP_PORT,LATCH_PIN,PUSH_PULL);
}
void STP_ShiftData(u8 Copy_u8Data)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	for(u8 i = 0;i < 8;i++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	73fb      	strb	r3, [r7, #15]
 8000ff6:	e01c      	b.n	8001032 <STP_ShiftData+0x4a>
	{
	GPIO_SetPinValue(STP_PORT,SERIAL_INPUT_PIN,GET_BIT(Copy_u8Data,i));
 8000ff8:	79fa      	ldrb	r2, [r7, #7]
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	fa42 f303 	asr.w	r3, r2, r3
 8001000:	b2db      	uxtb	r3, r3
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	b2db      	uxtb	r3, r3
 8001008:	461a      	mov	r2, r3
 800100a:	2101      	movs	r1, #1
 800100c:	2000      	movs	r0, #0
 800100e:	f7ff fef7 	bl	8000e00 <GPIO_SetPinValue>
	GPIO_SetPinValue(STP_PORT,SHIFT_PIN,PIN_LOW);
 8001012:	2200      	movs	r2, #0
 8001014:	2100      	movs	r1, #0
 8001016:	2000      	movs	r0, #0
 8001018:	f7ff fef2 	bl	8000e00 <GPIO_SetPinValue>

	SYSTICK_Delay_ms(1);
 800101c:	2001      	movs	r0, #1
 800101e:	f000 fd3b 	bl	8001a98 <SYSTICK_Delay_ms>
	GPIO_SetPinValue(STP_PORT,SHIFT_PIN,PIN_HIGH);
 8001022:	2201      	movs	r2, #1
 8001024:	2100      	movs	r1, #0
 8001026:	2000      	movs	r0, #0
 8001028:	f7ff feea 	bl	8000e00 <GPIO_SetPinValue>
	for(u8 i = 0;i < 8;i++)
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	3301      	adds	r3, #1
 8001030:	73fb      	strb	r3, [r7, #15]
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	2b07      	cmp	r3, #7
 8001036:	d9df      	bls.n	8000ff8 <STP_ShiftData+0x10>
	}

}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <STP_SendData>:
void STP_SendData(void)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	af00      	add	r7, sp, #0
	GPIO_SetPinValue(STP_PORT,LATCH_PIN,PIN_LOW);
 8001046:	2200      	movs	r2, #0
 8001048:	2102      	movs	r1, #2
 800104a:	2000      	movs	r0, #0
 800104c:	f7ff fed8 	bl	8000e00 <GPIO_SetPinValue>
	SYSTICK_Delay_ms(1);
 8001050:	2001      	movs	r0, #1
 8001052:	f000 fd21 	bl	8001a98 <SYSTICK_Delay_ms>
	GPIO_SetPinValue(STP_PORT,LATCH_PIN,PIN_HIGH);
 8001056:	2201      	movs	r2, #1
 8001058:	2102      	movs	r1, #2
 800105a:	2000      	movs	r0, #0
 800105c:	f7ff fed0 	bl	8000e00 <GPIO_SetPinValue>
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}

08001064 <TIMER1_Start>:
#include<TIMER1.h>
#include<TIMER1_Prv.h>
#include<TIMER1_Cfg.h>
static void (*TIM1_PTR)(void) = NULL;
void TIMER1_Start(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
	/*Set the PreScaler For Timer 1*/
	TIMER1 -> PSC = (TIMER1_PRESCALER-1);
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <TIMER1_Start+0x50>)
 800106a:	220f      	movs	r2, #15
 800106c:	629a      	str	r2, [r3, #40]	; 0x28
	/*Event Generation Update for Counter Reinitilization */
#if UpDateRequest_SRC == UpDate_On
	SET_BIT(TIMER1->CR1,CR1_URS);
#elif UpDateRequest_SRC == UpDate_Off
	SET_BIT(TIMER1->CR1,CR1_URS);
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <TIMER1_Start+0x50>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a10      	ldr	r2, [pc, #64]	; (80010b4 <TIMER1_Start+0x50>)
 8001074:	f043 0304 	orr.w	r3, r3, #4
 8001078:	6013      	str	r3, [r2, #0]
	#error"Undefined Update Request Source"
#endif
#if UpDate_Generation == Update_Gen_On
	SET_BIT(TIMER1->EGR,EGR_UG);
#elif UpDate_Generation == Update_Gen_Off
	CLR_BIT(TIMER1->EGR,EGR_UG);
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <TIMER1_Start+0x50>)
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	4a0d      	ldr	r2, [pc, #52]	; (80010b4 <TIMER1_Start+0x50>)
 8001080:	f023 0301 	bic.w	r3, r3, #1
 8001084:	6153      	str	r3, [r2, #20]
	#error"Undefined Update Generation Mode"
#endif
#if ONE_PULSE_MODE == One_Pulse_On
	SET_BIT(TIMER1->CR1,CR1_OPM);
#elif ONE_PULSE_MODE == One_Pulse_Off
	CLR_BIT(TIMER1->CR1,CR1_OPM);
 8001086:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <TIMER1_Start+0x50>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <TIMER1_Start+0x50>)
 800108c:	f023 0308 	bic.w	r3, r3, #8
 8001090:	6013      	str	r3, [r2, #0]
#else
	#error"Undefined One Pulse Mode"
#endif
#if COUNTER_STATE == Counter_Enable
	SET_BIT(TIMER1->CR1,CR1_CEN);
 8001092:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <TIMER1_Start+0x50>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a07      	ldr	r2, [pc, #28]	; (80010b4 <TIMER1_Start+0x50>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6013      	str	r3, [r2, #0]
	CLR_BIT(TIMER1->CR1,CR1_CEN);
#else
	#error"Undefined Counter State"
#endif
#if AUTO_RELOAD_PRELOAD_STATE  == Auto_RE_PRE_Enable
	SET_BIT(TIMER1->CR1,CR1_ARPE);
 800109e:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <TIMER1_Start+0x50>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <TIMER1_Start+0x50>)
 80010a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010a8:	6013      	str	r3, [r2, #0]
	CLR_BIT(TIMER1->CR1,CR1_ARPE);
#else
	#error"Undefined Auto Reload Preload State"
#endif

}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	40010000 	.word	0x40010000

080010b8 <TIMER1_SetOutputCompareMode>:
	TIMER1->ARR = (Duration-1);
	TIMER1_Interrupt_State(TIM1_Interrupten);
}

void TIMER1_SetOutputCompareMode(Channel_no channel,Compare_t C_Mode,u16 Duration,u16 Compare_u16Value)
{
 80010b8:	b590      	push	{r4, r7, lr}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4604      	mov	r4, r0
 80010c0:	4608      	mov	r0, r1
 80010c2:	4611      	mov	r1, r2
 80010c4:	461a      	mov	r2, r3
 80010c6:	4623      	mov	r3, r4
 80010c8:	71fb      	strb	r3, [r7, #7]
 80010ca:	4603      	mov	r3, r0
 80010cc:	71bb      	strb	r3, [r7, #6]
 80010ce:	460b      	mov	r3, r1
 80010d0:	80bb      	strh	r3, [r7, #4]
 80010d2:	4613      	mov	r3, r2
 80010d4:	807b      	strh	r3, [r7, #2]
	TIMER1_Start();
 80010d6:	f7ff ffc5 	bl	8001064 <TIMER1_Start>
	switch(channel)
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	2b03      	cmp	r3, #3
 80010de:	d86b      	bhi.n	80011b8 <TIMER1_SetOutputCompareMode+0x100>
 80010e0:	a201      	add	r2, pc, #4	; (adr r2, 80010e8 <TIMER1_SetOutputCompareMode+0x30>)
 80010e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e6:	bf00      	nop
 80010e8:	080010f9 	.word	0x080010f9
 80010ec:	08001129 	.word	0x08001129
 80010f0:	08001159 	.word	0x08001159
 80010f4:	08001189 	.word	0x08001189
	{
	case channel1:
		SET_BIT(TIMER1->CCMR1,CCMR1_OC1PE);
 80010f8:	4b39      	ldr	r3, [pc, #228]	; (80011e0 <TIMER1_SetOutputCompareMode+0x128>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	4a38      	ldr	r2, [pc, #224]	; (80011e0 <TIMER1_SetOutputCompareMode+0x128>)
 80010fe:	f043 0308 	orr.w	r3, r3, #8
 8001102:	6193      	str	r3, [r2, #24]
		TIMER1 -> CCMR1 |= (C_Mode<<4);
 8001104:	4b36      	ldr	r3, [pc, #216]	; (80011e0 <TIMER1_SetOutputCompareMode+0x128>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	79ba      	ldrb	r2, [r7, #6]
 800110a:	0112      	lsls	r2, r2, #4
 800110c:	4611      	mov	r1, r2
 800110e:	4a34      	ldr	r2, [pc, #208]	; (80011e0 <TIMER1_SetOutputCompareMode+0x128>)
 8001110:	430b      	orrs	r3, r1
 8001112:	6193      	str	r3, [r2, #24]
		TIMER1 -> CCER |= (1<<(channel1*4));
 8001114:	4b32      	ldr	r3, [pc, #200]	; (80011e0 <TIMER1_SetOutputCompareMode+0x128>)
 8001116:	6a1b      	ldr	r3, [r3, #32]
 8001118:	4a31      	ldr	r2, [pc, #196]	; (80011e0 <TIMER1_SetOutputCompareMode+0x128>)
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	6213      	str	r3, [r2, #32]
		TIMER1 -> CCR1 = Compare_u16Value;
 8001120:	4a2f      	ldr	r2, [pc, #188]	; (80011e0 <TIMER1_SetOutputCompareMode+0x128>)
 8001122:	887b      	ldrh	r3, [r7, #2]
 8001124:	6353      	str	r3, [r2, #52]	; 0x34
		break;
 8001126:	e047      	b.n	80011b8 <TIMER1_SetOutputCompareMode+0x100>
	case channel2:
		SET_BIT(TIMER1->CCMR1,CCMR1_OC2PE);
 8001128:	4b2d      	ldr	r3, [pc, #180]	; (80011e0 <TIMER1_SetOutputCompareMode+0x128>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a2c      	ldr	r2, [pc, #176]	; (80011e0 <TIMER1_SetOutputCompareMode+0x128>)
 800112e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001132:	6193      	str	r3, [r2, #24]
		TIMER1 ->CCMR1 |= (C_Mode<<12);
 8001134:	4b2a      	ldr	r3, [pc, #168]	; (80011e0 <TIMER1_SetOutputCompareMode+0x128>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	79ba      	ldrb	r2, [r7, #6]
 800113a:	0312      	lsls	r2, r2, #12
 800113c:	4611      	mov	r1, r2
 800113e:	4a28      	ldr	r2, [pc, #160]	; (80011e0 <TIMER1_SetOutputCompareMode+0x128>)
 8001140:	430b      	orrs	r3, r1
 8001142:	6193      	str	r3, [r2, #24]
		TIMER1 -> CCER |= (1<<(channel2*4));
 8001144:	4b26      	ldr	r3, [pc, #152]	; (80011e0 <TIMER1_SetOutputCompareMode+0x128>)
 8001146:	6a1b      	ldr	r3, [r3, #32]
 8001148:	4a25      	ldr	r2, [pc, #148]	; (80011e0 <TIMER1_SetOutputCompareMode+0x128>)
 800114a:	f043 0310 	orr.w	r3, r3, #16
 800114e:	6213      	str	r3, [r2, #32]
		TIMER1 -> CCR2 = Compare_u16Value;
 8001150:	4a23      	ldr	r2, [pc, #140]	; (80011e0 <TIMER1_SetOutputCompareMode+0x128>)
 8001152:	887b      	ldrh	r3, [r7, #2]
 8001154:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8001156:	e02f      	b.n	80011b8 <TIMER1_SetOutputCompareMode+0x100>
	case channel3:
		SET_BIT(TIMER1->CCMR2,CCMR2_OC3PE);
 8001158:	4b21      	ldr	r3, [pc, #132]	; (80011e0 <TIMER1_SetOutputCompareMode+0x128>)
 800115a:	69db      	ldr	r3, [r3, #28]
 800115c:	4a20      	ldr	r2, [pc, #128]	; (80011e0 <TIMER1_SetOutputCompareMode+0x128>)
 800115e:	f043 0308 	orr.w	r3, r3, #8
 8001162:	61d3      	str	r3, [r2, #28]
		TIMER1 -> CCMR2 |= (C_Mode<<4);
 8001164:	4b1e      	ldr	r3, [pc, #120]	; (80011e0 <TIMER1_SetOutputCompareMode+0x128>)
 8001166:	69db      	ldr	r3, [r3, #28]
 8001168:	79ba      	ldrb	r2, [r7, #6]
 800116a:	0112      	lsls	r2, r2, #4
 800116c:	4611      	mov	r1, r2
 800116e:	4a1c      	ldr	r2, [pc, #112]	; (80011e0 <TIMER1_SetOutputCompareMode+0x128>)
 8001170:	430b      	orrs	r3, r1
 8001172:	61d3      	str	r3, [r2, #28]
		TIMER1 -> CCER |= (1<<(channel3*4));
 8001174:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <TIMER1_SetOutputCompareMode+0x128>)
 8001176:	6a1b      	ldr	r3, [r3, #32]
 8001178:	4a19      	ldr	r2, [pc, #100]	; (80011e0 <TIMER1_SetOutputCompareMode+0x128>)
 800117a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800117e:	6213      	str	r3, [r2, #32]
		TIMER1 -> CCR3 = Compare_u16Value;
 8001180:	4a17      	ldr	r2, [pc, #92]	; (80011e0 <TIMER1_SetOutputCompareMode+0x128>)
 8001182:	887b      	ldrh	r3, [r7, #2]
 8001184:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8001186:	e017      	b.n	80011b8 <TIMER1_SetOutputCompareMode+0x100>
	case channel4:
		SET_BIT(TIMER1->CCMR2,CCMR2_OC4PE);
 8001188:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <TIMER1_SetOutputCompareMode+0x128>)
 800118a:	69db      	ldr	r3, [r3, #28]
 800118c:	4a14      	ldr	r2, [pc, #80]	; (80011e0 <TIMER1_SetOutputCompareMode+0x128>)
 800118e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001192:	61d3      	str	r3, [r2, #28]
		TIMER1 -> CCMR2 |= (C_Mode<<12);
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <TIMER1_SetOutputCompareMode+0x128>)
 8001196:	69db      	ldr	r3, [r3, #28]
 8001198:	79ba      	ldrb	r2, [r7, #6]
 800119a:	0312      	lsls	r2, r2, #12
 800119c:	4611      	mov	r1, r2
 800119e:	4a10      	ldr	r2, [pc, #64]	; (80011e0 <TIMER1_SetOutputCompareMode+0x128>)
 80011a0:	430b      	orrs	r3, r1
 80011a2:	61d3      	str	r3, [r2, #28]
		TIMER1 -> CCER |= (1<<(channel4*4));
 80011a4:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <TIMER1_SetOutputCompareMode+0x128>)
 80011a6:	6a1b      	ldr	r3, [r3, #32]
 80011a8:	4a0d      	ldr	r2, [pc, #52]	; (80011e0 <TIMER1_SetOutputCompareMode+0x128>)
 80011aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011ae:	6213      	str	r3, [r2, #32]
		TIMER1 -> CCR4 = Compare_u16Value;
 80011b0:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <TIMER1_SetOutputCompareMode+0x128>)
 80011b2:	887b      	ldrh	r3, [r7, #2]
 80011b4:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 80011b6:	bf00      	nop
	}
	TIMER1 ->ARR = (Duration - 1);
 80011b8:	88bb      	ldrh	r3, [r7, #4]
 80011ba:	1e5a      	subs	r2, r3, #1
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <TIMER1_SetOutputCompareMode+0x128>)
 80011be:	62da      	str	r2, [r3, #44]	; 0x2c
	SET_BIT(TIMER1->BDTR,BDTR_MOE);
 80011c0:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <TIMER1_SetOutputCompareMode+0x128>)
 80011c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c4:	4a06      	ldr	r2, [pc, #24]	; (80011e0 <TIMER1_SetOutputCompareMode+0x128>)
 80011c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011ca:	6453      	str	r3, [r2, #68]	; 0x44
	SET_BIT(TIMER1->CR1,CR1_CEN);
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <TIMER1_SetOutputCompareMode+0x128>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a03      	ldr	r2, [pc, #12]	; (80011e0 <TIMER1_SetOutputCompareMode+0x128>)
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	6013      	str	r3, [r2, #0]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd90      	pop	{r4, r7, pc}
 80011e0:	40010000 	.word	0x40010000

080011e4 <TIM1_UP_TIM10_IRQHandler>:
	}
	return  Frequency;
}

void TIM1_UP_TIM10_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	TIM1_PTR();
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4798      	blx	r3
	CLR_BIT(TIMER1->SR,SR_UIF);
 80011ee:	4b05      	ldr	r3, [pc, #20]	; (8001204 <TIM1_UP_TIM10_IRQHandler+0x20>)
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	4a04      	ldr	r2, [pc, #16]	; (8001204 <TIM1_UP_TIM10_IRQHandler+0x20>)
 80011f4:	f023 0301 	bic.w	r3, r3, #1
 80011f8:	6113      	str	r3, [r2, #16]
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	2000001c 	.word	0x2000001c
 8001204:	40010000 	.word	0x40010000

08001208 <Volt_SensorReading>:
#include<Std_Types.h>
#include<Macros.h>
#include<Volt_Sensor.h>

f32 Volt_SensorReading(u16 ADC_u16Reading)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	80fb      	strh	r3, [r7, #6]
	f32 Local_f32AdcReference = 3300.0;
 8001212:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <Volt_SensorReading+0x78>)
 8001214:	617b      	str	r3, [r7, #20]
	f32 vin = 0.0;
 8001216:	f04f 0300 	mov.w	r3, #0
 800121a:	613b      	str	r3, [r7, #16]
	f32 vout = 0.0;
 800121c:	f04f 0300 	mov.w	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
	f32 adc_max_value = 4095.0;
 8001222:	4b18      	ldr	r3, [pc, #96]	; (8001284 <Volt_SensorReading+0x7c>)
 8001224:	60bb      	str	r3, [r7, #8]
	/*To Get the Temperature analog Value in mV*/
	/*4096                 -->      3300*/
	/*Local_u16AnalogValue -->     ADC_u16Reading */

	vout = (((u32)ADC_u16Reading*Local_f32AdcReference)/adc_max_value);
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	ee07 3a90 	vmov	s15, r3
 800122c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001230:	edd7 7a05 	vldr	s15, [r7, #20]
 8001234:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001238:	ed97 7a02 	vldr	s14, [r7, #8]
 800123c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001240:	edc7 7a03 	vstr	s15, [r7, #12]

	vin = vout *(25.0/3.3);
 8001244:	68f8      	ldr	r0, [r7, #12]
 8001246:	f7ff fa55 	bl	80006f4 <__aeabi_f2d>
 800124a:	a30b      	add	r3, pc, #44	; (adr r3, 8001278 <Volt_SensorReading+0x70>)
 800124c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001250:	f7fe ffc2 	bl	80001d8 <__aeabi_dmul>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4610      	mov	r0, r2
 800125a:	4619      	mov	r1, r3
 800125c:	f7ff faa2 	bl	80007a4 <__aeabi_d2f>
 8001260:	4603      	mov	r3, r0
 8001262:	613b      	str	r3, [r7, #16]
	return vin;
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	ee07 3a90 	vmov	s15, r3
}
 800126a:	eeb0 0a67 	vmov.f32	s0, s15
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	f3af 8000 	nop.w
 8001278:	64d9364e 	.word	0x64d9364e
 800127c:	401e4d93 	.word	0x401e4d93
 8001280:	454e4000 	.word	0x454e4000
 8001284:	457ff000 	.word	0x457ff000

08001288 <ADC1_vInit>:


static void (*GLB_PTR[2])(void) ;
/**/
void ADC1_vInit(ADC_Res_t  Resolution,ADC_Prescaler Prescaler)
{	/*Select the ADC1 Resolution*/
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	460a      	mov	r2, r1
 8001292:	71fb      	strb	r3, [r7, #7]
 8001294:	4613      	mov	r3, r2
 8001296:	71bb      	strb	r3, [r7, #6]
	ADC1->CR1 &=~(RES_MUSK<<24);
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <ADC1_vInit+0x5c>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	4a11      	ldr	r2, [pc, #68]	; (80012e4 <ADC1_vInit+0x5c>)
 800129e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80012a2:	6053      	str	r3, [r2, #4]
	ADC1->CR1 |=(Resolution<<24);
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <ADC1_vInit+0x5c>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	79fa      	ldrb	r2, [r7, #7]
 80012aa:	0612      	lsls	r2, r2, #24
 80012ac:	4611      	mov	r1, r2
 80012ae:	4a0d      	ldr	r2, [pc, #52]	; (80012e4 <ADC1_vInit+0x5c>)
 80012b0:	430b      	orrs	r3, r1
 80012b2:	6053      	str	r3, [r2, #4]

	/*Select the PreScaler for ADC1 */
	ADC1->CCR &=~(PRE_MUSK<<0);
 80012b4:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <ADC1_vInit+0x5c>)
 80012b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012b8:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <ADC1_vInit+0x5c>)
 80012ba:	f023 0303 	bic.w	r3, r3, #3
 80012be:	6513      	str	r3, [r2, #80]	; 0x50
	ADC1->CCR |= (Prescaler<<0);
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <ADC1_vInit+0x5c>)
 80012c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012c4:	79bb      	ldrb	r3, [r7, #6]
 80012c6:	4907      	ldr	r1, [pc, #28]	; (80012e4 <ADC1_vInit+0x5c>)
 80012c8:	4313      	orrs	r3, r2
 80012ca:	650b      	str	r3, [r1, #80]	; 0x50

	/*Start the ADC*/
	SET_BIT(ADC1->CR2,CR2_ADON);
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <ADC1_vInit+0x5c>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <ADC1_vInit+0x5c>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6093      	str	r3, [r2, #8]

}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	40012000 	.word	0x40012000

080012e8 <ADC1_vReadInjectedSingleChannelAsynchronous>:
	/*Read the data from the Regular Data Register */
	/*Clear the End of Conversion flag when Read the data Register */
	return ADC1->JDR1;
}
u16 ADC1_vReadInjectedSingleChannelAsynchronous(ADC_Channel_no Channel)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
	/*Set the single Channel Sequence */
	ADC1_vSetInjectedChannelSequence(Channel, ADCx_Sequence4);
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	2103      	movs	r1, #3
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 f81a 	bl	8001330 <ADC1_vSetInjectedChannelSequence>
	return ADC1->JDR1;
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <ADC1_vReadInjectedSingleChannelAsynchronous+0x24>)
 80012fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001300:	b29b      	uxth	r3, r3
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40012000 	.word	0x40012000

08001310 <ADC1_InjectedSwStartEnable>:
void ADC1_InjectedSwStartEnable(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
	/*Enable SW Start for Conversion in injected Channels*/
	SET_BIT(ADC1->CR2,CR2_JSWSTART);
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <ADC1_InjectedSwStartEnable+0x1c>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	4a04      	ldr	r2, [pc, #16]	; (800132c <ADC1_InjectedSwStartEnable+0x1c>)
 800131a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800131e:	6093      	str	r3, [r2, #8]
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40012000 	.word	0x40012000

08001330 <ADC1_vSetInjectedChannelSequence>:
{
	/*Enable SW Start for Conversion in injected Channels*/
	CLR_BIT(ADC1->CR2,CR2_JSWSTART);
}
void ADC1_vSetInjectedChannelSequence(ADC_Channel_no Channel,ADC_Sequence_no Sqn_no)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	460a      	mov	r2, r1
 800133a:	71fb      	strb	r3, [r7, #7]
 800133c:	4613      	mov	r3, r2
 800133e:	71bb      	strb	r3, [r7, #6]
	ADC1->JSQR &=~ ((JSQR_MUSK)<<Sqn_no *5);
 8001340:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <ADC1_vSetInjectedChannelSequence+0x50>)
 8001342:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001344:	79ba      	ldrb	r2, [r7, #6]
 8001346:	4613      	mov	r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4413      	add	r3, r2
 800134c:	221f      	movs	r2, #31
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <ADC1_vSetInjectedChannelSequence+0x50>)
 8001356:	400b      	ands	r3, r1
 8001358:	6393      	str	r3, [r2, #56]	; 0x38
	ADC1->JSQR |= (Channel<<Sqn_no *5);
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <ADC1_vSetInjectedChannelSequence+0x50>)
 800135c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800135e:	79f8      	ldrb	r0, [r7, #7]
 8001360:	79ba      	ldrb	r2, [r7, #6]
 8001362:	4613      	mov	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	fa00 f303 	lsl.w	r3, r0, r3
 800136c:	4a04      	ldr	r2, [pc, #16]	; (8001380 <ADC1_vSetInjectedChannelSequence+0x50>)
 800136e:	430b      	orrs	r3, r1
 8001370:	6393      	str	r3, [r2, #56]	; 0x38

}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40012000 	.word	0x40012000

08001384 <ADC1_InterruptEnable>:
	/*Set the No. of Conversions */
	ADC1->SQR1 &=~((SQR_MUSK)<<SQR1_L);
	ADC1->SQR1 |= (Copy_u8Channel<<SQR1_L);
}
void ADC1_InterruptEnable(Channel_t Channel_T)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
	switch(Channel_T)
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d002      	beq.n	800139a <ADC1_InterruptEnable+0x16>
 8001394:	2b01      	cmp	r3, #1
 8001396:	d007      	beq.n	80013a8 <ADC1_InterruptEnable+0x24>
		break;
		case Injected:
			SET_BIT(ADC1->CR1,CR1_JEOCIE);
		break;
	}
}
 8001398:	e00d      	b.n	80013b6 <ADC1_InterruptEnable+0x32>
			SET_BIT(ADC1->CR1,CR1_EOCIE);
 800139a:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <ADC1_InterruptEnable+0x40>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	4a09      	ldr	r2, [pc, #36]	; (80013c4 <ADC1_InterruptEnable+0x40>)
 80013a0:	f043 0320 	orr.w	r3, r3, #32
 80013a4:	6053      	str	r3, [r2, #4]
		break;
 80013a6:	e006      	b.n	80013b6 <ADC1_InterruptEnable+0x32>
			SET_BIT(ADC1->CR1,CR1_JEOCIE);
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <ADC1_InterruptEnable+0x40>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <ADC1_InterruptEnable+0x40>)
 80013ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013b2:	6053      	str	r3, [r2, #4]
		break;
 80013b4:	bf00      	nop
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	40012000 	.word	0x40012000

080013c8 <ADC1_CallBack>:
				SET_BIT(ADC1->CR1,CR1_JDISCEN);
			break;
		}
}
void ADC1_CallBack(void(*ptr)(void),Channel_t Channel_T)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	70fb      	strb	r3, [r7, #3]
	switch(Channel_T)
 80013d4:	78fb      	ldrb	r3, [r7, #3]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d002      	beq.n	80013e0 <ADC1_CallBack+0x18>
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d004      	beq.n	80013e8 <ADC1_CallBack+0x20>
	case Injected:
		GLB_PTR[1] = ptr;
		//*ADC_Reading = ADC1->JDR1;
		break;
	}
}
 80013de:	e007      	b.n	80013f0 <ADC1_CallBack+0x28>
		GLB_PTR[0] = ptr;
 80013e0:	4a06      	ldr	r2, [pc, #24]	; (80013fc <ADC1_CallBack+0x34>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6013      	str	r3, [r2, #0]
		break;
 80013e6:	e003      	b.n	80013f0 <ADC1_CallBack+0x28>
		GLB_PTR[1] = ptr;
 80013e8:	4a04      	ldr	r2, [pc, #16]	; (80013fc <ADC1_CallBack+0x34>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6053      	str	r3, [r2, #4]
		break;
 80013ee:	bf00      	nop
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	20000020 	.word	0x20000020

08001400 <ADC_IRQHandler>:

void ADC_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
	if(GET_BIT(ADC1->SR,SR_EOC))
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <ADC_IRQHandler+0x4c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	085b      	lsrs	r3, r3, #1
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d009      	beq.n	8001426 <ADC_IRQHandler+0x26>
	{
		GLB_PTR[0]();
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <ADC_IRQHandler+0x50>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4798      	blx	r3
		CLR_BIT(ADC1->SR,SR_EOC);
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <ADC_IRQHandler+0x4c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a0b      	ldr	r2, [pc, #44]	; (800144c <ADC_IRQHandler+0x4c>)
 800141e:	f023 0302 	bic.w	r3, r3, #2
 8001422:	6013      	str	r3, [r2, #0]
	else if(GET_BIT(ADC1->SR,SR_JEOC))
	{
		GLB_PTR[1]();
		CLR_BIT(ADC1->SR,SR_JEOC);
	}
}
 8001424:	e00f      	b.n	8001446 <ADC_IRQHandler+0x46>
	else if(GET_BIT(ADC1->SR,SR_JEOC))
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <ADC_IRQHandler+0x4c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	089b      	lsrs	r3, r3, #2
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	2b00      	cmp	r3, #0
 8001432:	d008      	beq.n	8001446 <ADC_IRQHandler+0x46>
		GLB_PTR[1]();
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <ADC_IRQHandler+0x50>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	4798      	blx	r3
		CLR_BIT(ADC1->SR,SR_JEOC);
 800143a:	4b04      	ldr	r3, [pc, #16]	; (800144c <ADC_IRQHandler+0x4c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a03      	ldr	r2, [pc, #12]	; (800144c <ADC_IRQHandler+0x4c>)
 8001440:	f023 0304 	bic.w	r3, r3, #4
 8001444:	6013      	str	r3, [r2, #0]
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40012000 	.word	0x40012000
 8001450:	20000020 	.word	0x20000020

08001454 <CAR_MoveForward>:
{
	STP_Init();
}

void CAR_MoveForward(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	STP_SendData();
 8001458:	f7ff fdf3 	bl	8001042 <STP_SendData>
	STP_ShiftData(MOVE_FORWARD);
 800145c:	20e4      	movs	r0, #228	; 0xe4
 800145e:	f7ff fdc3 	bl	8000fe8 <STP_ShiftData>
	STP_SendData();
 8001462:	f7ff fdee 	bl	8001042 <STP_SendData>
	TIMER1_SetOutputCompareMode(channel1, PWM_MODE1, 65500, SPEED5);
 8001466:	f24f 3333 	movw	r3, #62259	; 0xf333
 800146a:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 800146e:	2106      	movs	r1, #6
 8001470:	2000      	movs	r0, #0
 8001472:	f7ff fe21 	bl	80010b8 <TIMER1_SetOutputCompareMode>
	TIMER1_SetOutputCompareMode(channel2, PWM_MODE1, 65500, SPEED5);
 8001476:	f24f 3333 	movw	r3, #62259	; 0xf333
 800147a:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 800147e:	2106      	movs	r1, #6
 8001480:	2001      	movs	r0, #1
 8001482:	f7ff fe19 	bl	80010b8 <TIMER1_SetOutputCompareMode>
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}

0800148a <CAR_MoveBackWard>:
void CAR_MoveBackWard(void)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	af00      	add	r7, sp, #0
	STP_SendData();
 800148e:	f7ff fdd8 	bl	8001042 <STP_SendData>
	STP_ShiftData(MOVE_BACKWARD);
 8001492:	201b      	movs	r0, #27
 8001494:	f7ff fda8 	bl	8000fe8 <STP_ShiftData>
	STP_SendData();
 8001498:	f7ff fdd3 	bl	8001042 <STP_SendData>
	TIMER1_SetOutputCompareMode(channel1, PWM_MODE1, 65500, SPEED5);
 800149c:	f24f 3333 	movw	r3, #62259	; 0xf333
 80014a0:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 80014a4:	2106      	movs	r1, #6
 80014a6:	2000      	movs	r0, #0
 80014a8:	f7ff fe06 	bl	80010b8 <TIMER1_SetOutputCompareMode>
	TIMER1_SetOutputCompareMode(channel2, PWM_MODE1, 65500, SPEED5);
 80014ac:	f24f 3333 	movw	r3, #62259	; 0xf333
 80014b0:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 80014b4:	2106      	movs	r1, #6
 80014b6:	2001      	movs	r0, #1
 80014b8:	f7ff fdfe 	bl	80010b8 <TIMER1_SetOutputCompareMode>
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}

080014c0 <CAR_MoveRight>:
void CAR_MoveRight(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
	STP_SendData();
 80014c4:	f7ff fdbd 	bl	8001042 <STP_SendData>
	STP_ShiftData(MOVE_RIGHT);
 80014c8:	20a0      	movs	r0, #160	; 0xa0
 80014ca:	f7ff fd8d 	bl	8000fe8 <STP_ShiftData>
	STP_SendData();
 80014ce:	f7ff fdb8 	bl	8001042 <STP_SendData>
	TIMER1_SetOutputCompareMode(channel1, PWM_MODE1, 65500, SPEED5);
 80014d2:	f24f 3333 	movw	r3, #62259	; 0xf333
 80014d6:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 80014da:	2106      	movs	r1, #6
 80014dc:	2000      	movs	r0, #0
 80014de:	f7ff fdeb 	bl	80010b8 <TIMER1_SetOutputCompareMode>
	TIMER1_SetOutputCompareMode(channel2, PWM_MODE1, 65500, SPEED5);
 80014e2:	f24f 3333 	movw	r3, #62259	; 0xf333
 80014e6:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 80014ea:	2106      	movs	r1, #6
 80014ec:	2001      	movs	r0, #1
 80014ee:	f7ff fde3 	bl	80010b8 <TIMER1_SetOutputCompareMode>
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <CAR_MoveLeft>:
void CAR_MoveLeft(void)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	af00      	add	r7, sp, #0

	STP_SendData();
 80014fa:	f7ff fda2 	bl	8001042 <STP_SendData>
	STP_ShiftData(MOVE_LEFT);
 80014fe:	2044      	movs	r0, #68	; 0x44
 8001500:	f7ff fd72 	bl	8000fe8 <STP_ShiftData>
	STP_SendData();
 8001504:	f7ff fd9d 	bl	8001042 <STP_SendData>
	TIMER1_SetOutputCompareMode(channel1, PWM_MODE1, 65500, SPEED5);
 8001508:	f24f 3333 	movw	r3, #62259	; 0xf333
 800150c:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 8001510:	2106      	movs	r1, #6
 8001512:	2000      	movs	r0, #0
 8001514:	f7ff fdd0 	bl	80010b8 <TIMER1_SetOutputCompareMode>
	TIMER1_SetOutputCompareMode(channel2, PWM_MODE1, 65500, SPEED5);
 8001518:	f24f 3333 	movw	r3, #62259	; 0xf333
 800151c:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 8001520:	2106      	movs	r1, #6
 8001522:	2001      	movs	r0, #1
 8001524:	f7ff fdc8 	bl	80010b8 <TIMER1_SetOutputCompareMode>
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}

0800152c <CAR_STOP>:

void CAR_STOP(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
	STP_SendData();
 8001530:	f7ff fd87 	bl	8001042 <STP_SendData>
	STP_ShiftData(STOP_CAR);
 8001534:	2000      	movs	r0, #0
 8001536:	f7ff fd57 	bl	8000fe8 <STP_ShiftData>
	STP_SendData();
 800153a:	f7ff fd82 	bl	8001042 <STP_SendData>
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}

08001542 <CAR_FirstSpeed>:
void CAR_FirstSpeed(void)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	af00      	add	r7, sp, #0
	TIMER1_SetOutputCompareMode(channel1, PWM_MODE1, 65500, SPEED1);
 8001546:	f243 3333 	movw	r3, #13107	; 0x3333
 800154a:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 800154e:	2106      	movs	r1, #6
 8001550:	2000      	movs	r0, #0
 8001552:	f7ff fdb1 	bl	80010b8 <TIMER1_SetOutputCompareMode>
	TIMER1_SetOutputCompareMode(channel2, PWM_MODE1, 65500, SPEED1);
 8001556:	f243 3333 	movw	r3, #13107	; 0x3333
 800155a:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 800155e:	2106      	movs	r1, #6
 8001560:	2001      	movs	r0, #1
 8001562:	f7ff fda9 	bl	80010b8 <TIMER1_SetOutputCompareMode>
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}

0800156a <CAR_SecondSpeed>:
void CAR_SecondSpeed(void)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	af00      	add	r7, sp, #0
	TIMER1_SetOutputCompareMode(channel1, PWM_MODE1, 65500, SPEED2);
 800156e:	f246 6366 	movw	r3, #26214	; 0x6666
 8001572:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 8001576:	2106      	movs	r1, #6
 8001578:	2000      	movs	r0, #0
 800157a:	f7ff fd9d 	bl	80010b8 <TIMER1_SetOutputCompareMode>
	TIMER1_SetOutputCompareMode(channel2, PWM_MODE1, 65500, SPEED2);
 800157e:	f246 6366 	movw	r3, #26214	; 0x6666
 8001582:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 8001586:	2106      	movs	r1, #6
 8001588:	2001      	movs	r0, #1
 800158a:	f7ff fd95 	bl	80010b8 <TIMER1_SetOutputCompareMode>
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}

08001592 <CAR_ThirdSpeed>:
void CAR_ThirdSpeed(void)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	af00      	add	r7, sp, #0
	TIMER1_SetOutputCompareMode(channel1, PWM_MODE1, 65500, SPEED3);
 8001596:	f649 1399 	movw	r3, #39321	; 0x9999
 800159a:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 800159e:	2106      	movs	r1, #6
 80015a0:	2000      	movs	r0, #0
 80015a2:	f7ff fd89 	bl	80010b8 <TIMER1_SetOutputCompareMode>
	TIMER1_SetOutputCompareMode(channel2, PWM_MODE1, 65500, SPEED3);
 80015a6:	f649 1399 	movw	r3, #39321	; 0x9999
 80015aa:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 80015ae:	2106      	movs	r1, #6
 80015b0:	2001      	movs	r0, #1
 80015b2:	f7ff fd81 	bl	80010b8 <TIMER1_SetOutputCompareMode>
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}

080015ba <CAR_FourthSpeed>:

void CAR_FourthSpeed(void)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	af00      	add	r7, sp, #0
	TIMER1_SetOutputCompareMode(channel1, PWM_MODE1, 65500, SPEED4);
 80015be:	f64c 43cc 	movw	r3, #52428	; 0xcccc
 80015c2:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 80015c6:	2106      	movs	r1, #6
 80015c8:	2000      	movs	r0, #0
 80015ca:	f7ff fd75 	bl	80010b8 <TIMER1_SetOutputCompareMode>
	TIMER1_SetOutputCompareMode(channel2, PWM_MODE1, 65500, SPEED4);
 80015ce:	f64c 43cc 	movw	r3, #52428	; 0xcccc
 80015d2:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 80015d6:	2106      	movs	r1, #6
 80015d8:	2001      	movs	r0, #1
 80015da:	f7ff fd6d 	bl	80010b8 <TIMER1_SetOutputCompareMode>
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <CAR_FifthSpeed>:
void CAR_FifthSpeed(void)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	af00      	add	r7, sp, #0
	TIMER1_SetOutputCompareMode(channel1, PWM_MODE1, 65500, SPEED5);
 80015e6:	f24f 3333 	movw	r3, #62259	; 0xf333
 80015ea:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 80015ee:	2106      	movs	r1, #6
 80015f0:	2000      	movs	r0, #0
 80015f2:	f7ff fd61 	bl	80010b8 <TIMER1_SetOutputCompareMode>
	TIMER1_SetOutputCompareMode(channel2, PWM_MODE1, 65500, SPEED5);
 80015f6:	f24f 3333 	movw	r3, #62259	; 0xf333
 80015fa:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 80015fe:	2106      	movs	r1, #6
 8001600:	2001      	movs	r0, #1
 8001602:	f7ff fd59 	bl	80010b8 <TIMER1_SetOutputCompareMode>
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <TIM2_IRQHandler>:
	TIMER11_Start();
	TIMER11->ARR = (Duration-1);
	TIMERx_Interrupt_State(Timer11,TIMx_Interrupten);
}
void TIM2_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
	TIMER2_PTR();
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <TIM2_IRQHandler+0x20>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4798      	blx	r3
	CLR_BIT(TIMER2->SR,SR_UIF);
 8001616:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001620:	f023 0301 	bic.w	r3, r3, #1
 8001624:	6113      	str	r3, [r2, #16]
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000028 	.word	0x20000028

08001630 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	TIMER3_PTR();
 8001634:	4b05      	ldr	r3, [pc, #20]	; (800164c <TIM3_IRQHandler+0x1c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4798      	blx	r3
	CLR_BIT(TIMER3->SR,SR_UIF);
 800163a:	4b05      	ldr	r3, [pc, #20]	; (8001650 <TIM3_IRQHandler+0x20>)
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	4a04      	ldr	r2, [pc, #16]	; (8001650 <TIM3_IRQHandler+0x20>)
 8001640:	f023 0301 	bic.w	r3, r3, #1
 8001644:	6113      	str	r3, [r2, #16]
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	2000002c 	.word	0x2000002c
 8001650:	40000400 	.word	0x40000400

08001654 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
	TIMER4_PTR();
 8001658:	4b05      	ldr	r3, [pc, #20]	; (8001670 <TIM4_IRQHandler+0x1c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4798      	blx	r3
	CLR_BIT(TIMER4->SR,SR_UIF);
 800165e:	4b05      	ldr	r3, [pc, #20]	; (8001674 <TIM4_IRQHandler+0x20>)
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	4a04      	ldr	r2, [pc, #16]	; (8001674 <TIM4_IRQHandler+0x20>)
 8001664:	f023 0301 	bic.w	r3, r3, #1
 8001668:	6113      	str	r3, [r2, #16]
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000030 	.word	0x20000030
 8001674:	40000800 	.word	0x40000800

08001678 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	TIMER5_PTR();
 800167c:	4b05      	ldr	r3, [pc, #20]	; (8001694 <TIM5_IRQHandler+0x1c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4798      	blx	r3
	CLR_BIT(TIMER5->SR,SR_UIF);
 8001682:	4b05      	ldr	r3, [pc, #20]	; (8001698 <TIM5_IRQHandler+0x20>)
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	4a04      	ldr	r2, [pc, #16]	; (8001698 <TIM5_IRQHandler+0x20>)
 8001688:	f023 0301 	bic.w	r3, r3, #1
 800168c:	6113      	str	r3, [r2, #16]
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000034 	.word	0x20000034
 8001698:	40000c00 	.word	0x40000c00

0800169c <TIM1_BRK_TIM9_IRQHandler>:
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	TIMER9_PTR();
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <TIM1_BRK_TIM9_IRQHandler+0x1c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4798      	blx	r3
	CLR_BIT(TIMER9->SR,SR_UIF);
 80016a6:	4b05      	ldr	r3, [pc, #20]	; (80016bc <TIM1_BRK_TIM9_IRQHandler+0x20>)
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	4a04      	ldr	r2, [pc, #16]	; (80016bc <TIM1_BRK_TIM9_IRQHandler+0x20>)
 80016ac:	f023 0301 	bic.w	r3, r3, #1
 80016b0:	6113      	str	r3, [r2, #16]
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000038 	.word	0x20000038
 80016bc:	40014000 	.word	0x40014000

080016c0 <TIM1_TRG_COM_TIM11_IRQHandler>:
	TIMER10_PTR();
	CLR_BIT(TIMER10->SR,SR_UIF);
}
*/
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	TIMER11_PTR();
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4798      	blx	r3
	CLR_BIT(TIMER11->SR,SR_UIF);
 80016ca:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <TIM1_TRG_COM_TIM11_IRQHandler+0x20>)
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <TIM1_TRG_COM_TIM11_IRQHandler+0x20>)
 80016d0:	f023 0301 	bic.w	r3, r3, #1
 80016d4:	6113      	str	r3, [r2, #16]
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	2000003c 	.word	0x2000003c
 80016e0:	40014800 	.word	0x40014800

080016e4 <main>:

u8 Data = 0;
u16 ADC_Reading = 0;

void main(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
	RCC_VInit();
 80016e8:	f7ff fa7e 	bl	8000be8 <RCC_VInit>
	RCC_VEnableClkPeripheral(AHB1ENR, AHB1_GPIOA_EN);
 80016ec:	2100      	movs	r1, #0
 80016ee:	2000      	movs	r0, #0
 80016f0:	f7ff fa9e 	bl	8000c30 <RCC_VEnableClkPeripheral>
	RCC_VEnableClkPeripheral(AHB1ENR, AHB1_GPIOB_EN);
 80016f4:	2101      	movs	r1, #1
 80016f6:	2000      	movs	r0, #0
 80016f8:	f7ff fa9a 	bl	8000c30 <RCC_VEnableClkPeripheral>
	RCC_VEnableClkPeripheral(APB2ENR, APB2_USART1_EN);
 80016fc:	2104      	movs	r1, #4
 80016fe:	2003      	movs	r0, #3
 8001700:	f7ff fa96 	bl	8000c30 <RCC_VEnableClkPeripheral>
	RCC_VEnableClkPeripheral(APB2ENR, APB2_TIM1_EN);
 8001704:	2100      	movs	r1, #0
 8001706:	2003      	movs	r0, #3
 8001708:	f7ff fa92 	bl	8000c30 <RCC_VEnableClkPeripheral>
	RCC_VEnableClkPeripheral(APB2ENR, APB2_USART6_EN);
 800170c:	2105      	movs	r1, #5
 800170e:	2003      	movs	r0, #3
 8001710:	f7ff fa8e 	bl	8000c30 <RCC_VEnableClkPeripheral>
	RCC_VEnableClkPeripheral(APB2ENR, APB2_ADC1_EN);
 8001714:	2108      	movs	r1, #8
 8001716:	2003      	movs	r0, #3
 8001718:	f7ff fa8a 	bl	8000c30 <RCC_VEnableClkPeripheral>

	GPIO_SetMode(PORTB, PIN7, ALTERNATE);
 800171c:	2202      	movs	r2, #2
 800171e:	2107      	movs	r1, #7
 8001720:	2001      	movs	r0, #1
 8001722:	f7ff fb05 	bl	8000d30 <GPIO_SetMode>
	GPIO_SetAlternateFunc(PORTB, PIN7, AF7);
 8001726:	2207      	movs	r2, #7
 8001728:	2107      	movs	r1, #7
 800172a:	2001      	movs	r0, #1
 800172c:	f7ff fbca 	bl	8000ec4 <GPIO_SetAlternateFunc>
	USART_Init();
 8001730:	f000 f9f0 	bl	8001b14 <USART_Init>
	NVIC_EnableInterrupt(USART1);
 8001734:	2025      	movs	r0, #37	; 0x25
 8001736:	f000 f939 	bl	80019ac <NVIC_EnableInterrupt>
	USART1_RX_InterruptState(RX_INT_Enable);
 800173a:	2001      	movs	r0, #1
 800173c:	f000 fa6a 	bl	8001c14 <USART1_RX_InterruptState>
	USART1_CallBack(CAR_Control, RX_Interrupt);
 8001740:	2101      	movs	r1, #1
 8001742:	4821      	ldr	r0, [pc, #132]	; (80017c8 <main+0xe4>)
 8001744:	f000 fa92 	bl	8001c6c <USART1_CallBack>

	/*********/
	ADC1_vInit(ADCx_Res12, PCLK2_2);
 8001748:	2100      	movs	r1, #0
 800174a:	2000      	movs	r0, #0
 800174c:	f7ff fd9c 	bl	8001288 <ADC1_vInit>
	NVIC_EnableInterrupt(ADC);
 8001750:	2012      	movs	r0, #18
 8001752:	f000 f92b 	bl	80019ac <NVIC_EnableInterrupt>
	GPIO_SetMode(PORTA, PIN5, ANALOG);
 8001756:	2203      	movs	r2, #3
 8001758:	2105      	movs	r1, #5
 800175a:	2000      	movs	r0, #0
 800175c:	f7ff fae8 	bl	8000d30 <GPIO_SetMode>
	ADC1_CallBack(Voltage_Read,Injected);
 8001760:	2101      	movs	r1, #1
 8001762:	481a      	ldr	r0, [pc, #104]	; (80017cc <main+0xe8>)
 8001764:	f7ff fe30 	bl	80013c8 <ADC1_CallBack>
	ADC1_InterruptEnable(Injected);
 8001768:	2001      	movs	r0, #1
 800176a:	f7ff fe0b 	bl	8001384 <ADC1_InterruptEnable>
	/****************/
	GPIO_SetMode(PORTA, PIN11, ALTERNATE);
 800176e:	2202      	movs	r2, #2
 8001770:	210b      	movs	r1, #11
 8001772:	2000      	movs	r0, #0
 8001774:	f7ff fadc 	bl	8000d30 <GPIO_SetMode>
	GPIO_SetMode(PORTA, PIN12, ALTERNATE);
 8001778:	2202      	movs	r2, #2
 800177a:	210c      	movs	r1, #12
 800177c:	2000      	movs	r0, #0
 800177e:	f7ff fad7 	bl	8000d30 <GPIO_SetMode>
	GPIO_SetAlternateFunc(PORTA, PIN11, AF8);
 8001782:	2208      	movs	r2, #8
 8001784:	210b      	movs	r1, #11
 8001786:	2000      	movs	r0, #0
 8001788:	f7ff fb9c 	bl	8000ec4 <GPIO_SetAlternateFunc>
	GPIO_SetAlternateFunc(PORTA, PIN12, AF8);
 800178c:	2208      	movs	r2, #8
 800178e:	210c      	movs	r1, #12
 8001790:	2000      	movs	r0, #0
 8001792:	f7ff fb97 	bl	8000ec4 <GPIO_SetAlternateFunc>
	USART6_Init();
 8001796:	f000 f9ed 	bl	8001b74 <USART6_Init>
	NVIC_EnableInterrupt(USART6);
 800179a:	2047      	movs	r0, #71	; 0x47
 800179c:	f000 f906 	bl	80019ac <NVIC_EnableInterrupt>
	USART6_TX_InterruptState(TX_INT_Enable);
 80017a0:	2001      	movs	r0, #1
 80017a2:	f000 fa17 	bl	8001bd4 <USART6_TX_InterruptState>

	while(1)
	{
		Data = USART1_ReadDataRegister();
 80017a6:	f000 fa55 	bl	8001c54 <USART1_ReadDataRegister>
 80017aa:	4603      	mov	r3, r0
 80017ac:	461a      	mov	r2, r3
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <main+0xec>)
 80017b0:	701a      	strb	r2, [r3, #0]
		ADC_Reading = ADC1_vReadInjectedSingleChannelAsynchronous(ADCx_CHANNEL5);
 80017b2:	2005      	movs	r0, #5
 80017b4:	f7ff fd98 	bl	80012e8 <ADC1_vReadInjectedSingleChannelAsynchronous>
 80017b8:	4603      	mov	r3, r0
 80017ba:	461a      	mov	r2, r3
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <main+0xf0>)
 80017be:	801a      	strh	r2, [r3, #0]
		ADC1_InjectedSwStartEnable();
 80017c0:	f7ff fda6 	bl	8001310 <ADC1_InjectedSwStartEnable>
		Data = USART1_ReadDataRegister();
 80017c4:	e7ef      	b.n	80017a6 <main+0xc2>
 80017c6:	bf00      	nop
 80017c8:	080017d9 	.word	0x080017d9
 80017cc:	08001969 	.word	0x08001969
 80017d0:	20000040 	.word	0x20000040
 80017d4:	20000042 	.word	0x20000042

080017d8 <CAR_Control>:

	}

}
void CAR_Control(void)
{	u8 car_mode = Data;
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4b61      	ldr	r3, [pc, #388]	; (8001964 <CAR_Control+0x18c>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	71fb      	strb	r3, [r7, #7]
	switch(car_mode)
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	3b31      	subs	r3, #49	; 0x31
 80017e8:	2b49      	cmp	r3, #73	; 0x49
 80017ea:	f200 80b5 	bhi.w	8001958 <CAR_Control+0x180>
 80017ee:	a201      	add	r2, pc, #4	; (adr r2, 80017f4 <CAR_Control+0x1c>)
 80017f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f4:	0800193b 	.word	0x0800193b
 80017f8:	08001941 	.word	0x08001941
 80017fc:	08001947 	.word	0x08001947
 8001800:	0800194d 	.word	0x0800194d
 8001804:	08001953 	.word	0x08001953
 8001808:	08001959 	.word	0x08001959
 800180c:	08001959 	.word	0x08001959
 8001810:	08001959 	.word	0x08001959
 8001814:	08001959 	.word	0x08001959
 8001818:	08001959 	.word	0x08001959
 800181c:	08001959 	.word	0x08001959
 8001820:	08001959 	.word	0x08001959
 8001824:	08001959 	.word	0x08001959
 8001828:	08001959 	.word	0x08001959
 800182c:	08001959 	.word	0x08001959
 8001830:	08001959 	.word	0x08001959
 8001834:	08001959 	.word	0x08001959
 8001838:	08001959 	.word	0x08001959
 800183c:	08001959 	.word	0x08001959
 8001840:	08001959 	.word	0x08001959
 8001844:	08001959 	.word	0x08001959
 8001848:	08001959 	.word	0x08001959
 800184c:	08001959 	.word	0x08001959
 8001850:	08001959 	.word	0x08001959
 8001854:	08001959 	.word	0x08001959
 8001858:	08001959 	.word	0x08001959
 800185c:	08001959 	.word	0x08001959
 8001860:	08001959 	.word	0x08001959
 8001864:	08001959 	.word	0x08001959
 8001868:	08001959 	.word	0x08001959
 800186c:	08001959 	.word	0x08001959
 8001870:	08001959 	.word	0x08001959
 8001874:	08001959 	.word	0x08001959
 8001878:	08001959 	.word	0x08001959
 800187c:	08001959 	.word	0x08001959
 8001880:	08001959 	.word	0x08001959
 8001884:	08001959 	.word	0x08001959
 8001888:	08001959 	.word	0x08001959
 800188c:	08001959 	.word	0x08001959
 8001890:	08001959 	.word	0x08001959
 8001894:	08001959 	.word	0x08001959
 8001898:	08001959 	.word	0x08001959
 800189c:	08001959 	.word	0x08001959
 80018a0:	08001959 	.word	0x08001959
 80018a4:	08001959 	.word	0x08001959
 80018a8:	08001959 	.word	0x08001959
 80018ac:	08001959 	.word	0x08001959
 80018b0:	08001959 	.word	0x08001959
 80018b4:	0800192f 	.word	0x0800192f
 80018b8:	08001959 	.word	0x08001959
 80018bc:	08001959 	.word	0x08001959
 80018c0:	08001929 	.word	0x08001929
 80018c4:	08001959 	.word	0x08001959
 80018c8:	08001959 	.word	0x08001959
 80018cc:	08001959 	.word	0x08001959
 80018d0:	08001959 	.word	0x08001959
 80018d4:	08001959 	.word	0x08001959
 80018d8:	08001959 	.word	0x08001959
 80018dc:	08001959 	.word	0x08001959
 80018e0:	08001959 	.word	0x08001959
 80018e4:	08001959 	.word	0x08001959
 80018e8:	08001959 	.word	0x08001959
 80018ec:	08001959 	.word	0x08001959
 80018f0:	08001959 	.word	0x08001959
 80018f4:	08001959 	.word	0x08001959
 80018f8:	08001959 	.word	0x08001959
 80018fc:	08001923 	.word	0x08001923
 8001900:	08001959 	.word	0x08001959
 8001904:	08001959 	.word	0x08001959
 8001908:	08001959 	.word	0x08001959
 800190c:	0800191d 	.word	0x0800191d
 8001910:	08001959 	.word	0x08001959
 8001914:	08001959 	.word	0x08001959
 8001918:	08001935 	.word	0x08001935
	{
	/* In This case the car moves forward */
	case 'w':

		CAR_MoveForward();
 800191c:	f7ff fd9a 	bl	8001454 <CAR_MoveForward>
	break;
 8001920:	e01b      	b.n	800195a <CAR_Control+0x182>
	/* In This case the car moves Backward */
	case 's':
					//3a-2a-1a-1b-2b-4a-3b-4b
		CAR_MoveBackWard();
 8001922:	f7ff fdb2 	bl	800148a <CAR_MoveBackWard>
	break;
 8001926:	e018      	b.n	800195a <CAR_Control+0x182>
	/*In This case the car moves right*/
	case 'd':

		CAR_MoveRight();
 8001928:	f7ff fdca 	bl	80014c0 <CAR_MoveRight>
	break;
 800192c:	e015      	b.n	800195a <CAR_Control+0x182>
	/*In This case the car moves left*/
	case'a':

		CAR_MoveLeft();
 800192e:	f7ff fde2 	bl	80014f6 <CAR_MoveLeft>
	break;
 8001932:	e012      	b.n	800195a <CAR_Control+0x182>
	case'z':

		CAR_STOP();
 8001934:	f7ff fdfa 	bl	800152c <CAR_STOP>
	break;
 8001938:	e00f      	b.n	800195a <CAR_Control+0x182>
	case'1':

		CAR_FirstSpeed();
 800193a:	f7ff fe02 	bl	8001542 <CAR_FirstSpeed>
	break;
 800193e:	e00c      	b.n	800195a <CAR_Control+0x182>
	case'2':

		CAR_SecondSpeed();
 8001940:	f7ff fe13 	bl	800156a <CAR_SecondSpeed>
	break;
 8001944:	e009      	b.n	800195a <CAR_Control+0x182>
	case'3':

		CAR_ThirdSpeed();
 8001946:	f7ff fe24 	bl	8001592 <CAR_ThirdSpeed>
	break;
 800194a:	e006      	b.n	800195a <CAR_Control+0x182>
	case'4':

		CAR_FourthSpeed();
 800194c:	f7ff fe35 	bl	80015ba <CAR_FourthSpeed>
	break;
 8001950:	e003      	b.n	800195a <CAR_Control+0x182>
	case'5':

		CAR_FifthSpeed();
 8001952:	f7ff fe46 	bl	80015e2 <CAR_FifthSpeed>
	break;
 8001956:	e000      	b.n	800195a <CAR_Control+0x182>
	default:
		break;
 8001958:	bf00      	nop
	}
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000040 	.word	0x20000040

08001968 <Voltage_Read>:
void Voltage_Read(void)
{	u32 voltage = 0;
 8001968:	b5b0      	push	{r4, r5, r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
	voltage = Volt_SensorReading(ADC_Reading);
 8001972:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <Voltage_Read+0x40>)
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fc46 	bl	8001208 <Volt_SensorReading>
 800197c:	eef0 7a40 	vmov.f32	s15, s0
 8001980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001984:	ee17 3a90 	vmov	r3, s15
 8001988:	607b      	str	r3, [r7, #4]
	USART6_SendNumberINT(ADC_Reading);
 800198a:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <Voltage_Read+0x40>)
 800198c:	881b      	ldrh	r3, [r3, #0]
 800198e:	b29b      	uxth	r3, r3
 8001990:	2200      	movs	r2, #0
 8001992:	461c      	mov	r4, r3
 8001994:	4615      	mov	r5, r2
 8001996:	4620      	mov	r0, r4
 8001998:	4629      	mov	r1, r5
 800199a:	f000 f993 	bl	8001cc4 <USART6_SendNumberINT>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bdb0      	pop	{r4, r5, r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000042 	.word	0x20000042

080019ac <NVIC_EnableInterrupt>:
#include<NVIC_Prv.h>

static u8 Copy_u8Global = 0;

u8 NVIC_EnableInterrupt(INTERRUPT_Position Copy_uddtPosition)
{
 80019ac:	b490      	push	{r4, r7}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8ErrorState = OK;
 80019b6:	2301      	movs	r3, #1
 80019b8:	73fb      	strb	r3, [r7, #15]

	if(Copy_uddtPosition >= 0 && Copy_uddtPosition<=84)
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	2b54      	cmp	r3, #84	; 0x54
 80019be:	d813      	bhi.n	80019e8 <NVIC_EnableInterrupt+0x3c>
	{
	NVIC->ISER[Copy_uddtPosition/NVIC_DIVISION] |= (1<<(Copy_uddtPosition % NVIC_REMINDER ));
 80019c0:	4a0d      	ldr	r2, [pc, #52]	; (80019f8 <NVIC_EnableInterrupt+0x4c>)
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	095b      	lsrs	r3, r3, #5
 80019c6:	b2d8      	uxtb	r0, r3
 80019c8:	4603      	mov	r3, r0
 80019ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ce:	79fa      	ldrb	r2, [r7, #7]
 80019d0:	f002 021f 	and.w	r2, r2, #31
 80019d4:	2101      	movs	r1, #1
 80019d6:	fa01 f202 	lsl.w	r2, r1, r2
 80019da:	4614      	mov	r4, r2
 80019dc:	4a06      	ldr	r2, [pc, #24]	; (80019f8 <NVIC_EnableInterrupt+0x4c>)
 80019de:	4601      	mov	r1, r0
 80019e0:	4323      	orrs	r3, r4
 80019e2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80019e6:	e001      	b.n	80019ec <NVIC_EnableInterrupt+0x40>
	}
	else
	{
		Local_u8ErrorState = NOK;
 80019e8:	2302      	movs	r3, #2
 80019ea:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc90      	pop	{r4, r7}
 80019f6:	4770      	bx	lr
 80019f8:	e000e100 	.word	0xe000e100

080019fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <NMI_Handler+0x4>

08001a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a06:	e7fe      	b.n	8001a06 <HardFault_Handler+0x4>

08001a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <MemManage_Handler+0x4>

08001a0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a12:	e7fe      	b.n	8001a12 <BusFault_Handler+0x4>

08001a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <UsageFault_Handler+0x4>

08001a1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <SystemInit+0x20>)
 8001a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a4e:	4a05      	ldr	r2, [pc, #20]	; (8001a64 <SystemInit+0x20>)
 8001a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <SYSTICK_Start>:
/***************************************************************************************************************************/
				/*****To Start The SYSTICK Counter*****/
/***************************************************************************************************************************/

void SYSTICK_Start(u32 Load)//3
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	SYSTICK->LOAD = Load;
 8001a70:	4a08      	ldr	r2, [pc, #32]	; (8001a94 <SYSTICK_Start+0x2c>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6053      	str	r3, [r2, #4]
	SYSTICK->VAL = 0;
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <SYSTICK_Start+0x2c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
	SYSTICK->CTRL |= 1;
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <SYSTICK_Start+0x2c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <SYSTICK_Start+0x2c>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	6013      	str	r3, [r2, #0]
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000e010 	.word	0xe000e010

08001a98 <SYSTICK_Delay_ms>:
/***************************************************************************************************************************/
				/*****A Function To Make Milli-Second Delay with Systick*****/
/***************************************************************************************************************************/
void SYSTICK_Delay_ms(u32 Value)//4
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
#if CLK_SOURCE == CLK_SOURCE_AHB_8
	SYSTICK_Start(Value*2000);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001aa6:	fb02 f303 	mul.w	r3, r2, r3
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff ffdc 	bl	8001a68 <SYSTICK_Start>
	while(!SYSTICK_ReadFlag());
 8001ab0:	bf00      	nop
 8001ab2:	f000 f809 	bl	8001ac8 <SYSTICK_ReadFlag>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d0fa      	beq.n	8001ab2 <SYSTICK_Delay_ms+0x1a>
	SYSTICK_Start(Value*16000);
	while(!SYSTICK_ReadFlag());
#else
	#error"Undefined Clk Source"
#endif
}
 8001abc:	bf00      	nop
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <SYSTICK_ReadFlag>:
}
/***************************************************************************************************************************/
				/*****A Function To Read The Counter Done Counting and Reached Zero*****/
/***************************************************************************************************************************/
u8 SYSTICK_ReadFlag(void)//6
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
	u8 Flag = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	71fb      	strb	r3, [r7, #7]
	Flag = GET_BIT(SYSTICK->CTRL,COUNTFLAG);
 8001ad2:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <SYSTICK_ReadFlag+0x28>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	0c1b      	lsrs	r3, r3, #16
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	71fb      	strb	r3, [r7, #7]
	return Flag;
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000e010 	.word	0xe000e010

08001af4 <SysTick_Handler>:
}
/***************************************************************************************************************************/
											/*****SYSTICK HANDLER*****/
/***************************************************************************************************************************/
void SysTick_Handler (void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
	 if(SYSTICK_PTR!= NULL)
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <SysTick_Handler+0x1c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d004      	beq.n	8001b0a <SysTick_Handler+0x16>
	{
	SYSTICK_PTR();
 8001b00:	4b03      	ldr	r3, [pc, #12]	; (8001b10 <SysTick_Handler+0x1c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4798      	blx	r3
	SYSTICK_ReadFlag();
 8001b06:	f7ff ffdf 	bl	8001ac8 <SYSTICK_ReadFlag>
	 }
	 else
	 {
		 //donothing;
	 }
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000044 	.word	0x20000044

08001b14 <USART_Init>:
#include<USART_Cfg.h>
static void (*USART1_PTR[2])(void)={0};
static void (*USART6_PTR[2])(void)={0};
u8 transmitter;
void USART_Init(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
	/*Select the USART1 OverSampling Type*/
#if OVERSAMPLING_TYPE == OverSample16
	USART1->CR1.OVER8 = 0;
 8001b18:	4a15      	ldr	r2, [pc, #84]	; (8001b70 <USART_Init+0x5c>)
 8001b1a:	68d3      	ldr	r3, [r2, #12]
 8001b1c:	f36f 33cf 	bfc	r3, #15, #1
 8001b20:	60d3      	str	r3, [r2, #12]
	USART1->CR1.OVER8 = 1;
#else
	#error"Undefined OverSample Type"
#endif
	/*Set the USART1 BaudRate*/
	USART1->BRR |=(MANTISSA_VALUE<<4)|(DIV_FRACTION_value);   	// MANTISSA 104 VALUE // DIV_FRACTION 3 VALUE
 8001b22:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <USART_Init+0x5c>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <USART_Init+0x5c>)
 8001b28:	f443 63d0 	orr.w	r3, r3, #1664	; 0x680
 8001b2c:	f043 0303 	orr.w	r3, r3, #3
 8001b30:	6093      	str	r3, [r2, #8]

	/*USART1 Word Length*/
#if WORDLENGTH == STOP_1_DATA_8
	USART1->CR1.M = 0;
 8001b32:	4a0f      	ldr	r2, [pc, #60]	; (8001b70 <USART_Init+0x5c>)
 8001b34:	68d3      	ldr	r3, [r2, #12]
 8001b36:	f36f 330c 	bfc	r3, #12, #1
 8001b3a:	60d3      	str	r3, [r2, #12]
	#error "Undefined Word Length Type"
#endif

	/*The USART1 parity State*/
#if PARITY_CONTROL == Parity_Disable
	USART1->CR1.PCE = 0;
 8001b3c:	4a0c      	ldr	r2, [pc, #48]	; (8001b70 <USART_Init+0x5c>)
 8001b3e:	68d3      	ldr	r3, [r2, #12]
 8001b40:	f36f 238a 	bfc	r3, #10, #1
 8001b44:	60d3      	str	r3, [r2, #12]

	/*USART1 Transmit  State*/
#if USART1_TRANSMITTER_STATE == Transmitter_Disable
	USART1->CR1.TE = 0;
#elif USART1_TRANSMITTER_STATE == Transmitter_Enable
	USART1->CR1.TE = 1;
 8001b46:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <USART_Init+0x5c>)
 8001b48:	68d3      	ldr	r3, [r2, #12]
 8001b4a:	f043 0308 	orr.w	r3, r3, #8
 8001b4e:	60d3      	str	r3, [r2, #12]

	/*USART1 Receiver State*/
#if USART1_RECEIVER_STATE == Receiver_Disable
	USART1->CR1.RE = 0;
#elif USART1_RECEIVER_STATE == Receiver_Enable
	USART1->CR1.RE = 1;
 8001b50:	4a07      	ldr	r2, [pc, #28]	; (8001b70 <USART_Init+0x5c>)
 8001b52:	68d3      	ldr	r3, [r2, #12]
 8001b54:	f043 0304 	orr.w	r3, r3, #4
 8001b58:	60d3      	str	r3, [r2, #12]

	/*USART1 State*/
#if USART1_STATE == Usart1_Disable
	USART1->CR1.UE = 0;
#elif USART1_STATE == Usart1_Enable
	USART1->CR1.UE = 1;
 8001b5a:	4a05      	ldr	r2, [pc, #20]	; (8001b70 <USART_Init+0x5c>)
 8001b5c:	68d3      	ldr	r3, [r2, #12]
 8001b5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b62:	60d3      	str	r3, [r2, #12]
#else
	#error"Undefined USART1 State"
#endif

}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40011000 	.word	0x40011000

08001b74 <USART6_Init>:
void USART6_Init(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0

	/*Select the USART6 OverSampling Type*/
#if USART6_OVERSAMPLING_TYPE == OverSample16
	USART6->CR1.OVER8 = 0;
 8001b78:	4a15      	ldr	r2, [pc, #84]	; (8001bd0 <USART6_Init+0x5c>)
 8001b7a:	68d3      	ldr	r3, [r2, #12]
 8001b7c:	f36f 33cf 	bfc	r3, #15, #1
 8001b80:	60d3      	str	r3, [r2, #12]
	USART6->CR1.OVER8 = 1;
#else
	#error"Undefined OverSample Type"
#endif
	/*Set the USART6 BaudRate*/
	USART6->BRR |=(USART6_MANTISSA_VALUE<<4)|(USART6_DIV_FRACTION_value);   	// MANTISSA 104 VALUE // DIV_FRACTION 3 VALUE
 8001b82:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <USART6_Init+0x5c>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	4a12      	ldr	r2, [pc, #72]	; (8001bd0 <USART6_Init+0x5c>)
 8001b88:	f443 63d0 	orr.w	r3, r3, #1664	; 0x680
 8001b8c:	f043 0303 	orr.w	r3, r3, #3
 8001b90:	6093      	str	r3, [r2, #8]

	/*USART6 Word Length*/
#if USART6_WORDLENGTH == STOP_1_DATA_8
	USART6->CR1.M = 0;
 8001b92:	4a0f      	ldr	r2, [pc, #60]	; (8001bd0 <USART6_Init+0x5c>)
 8001b94:	68d3      	ldr	r3, [r2, #12]
 8001b96:	f36f 330c 	bfc	r3, #12, #1
 8001b9a:	60d3      	str	r3, [r2, #12]
	#error "Undefined Word Length Type"
#endif

	/*The USART6 parity State*/
#if USART6_PARITY_CONTROL == Parity_Disable
	USART6->CR1.PCE = 0;
 8001b9c:	4a0c      	ldr	r2, [pc, #48]	; (8001bd0 <USART6_Init+0x5c>)
 8001b9e:	68d3      	ldr	r3, [r2, #12]
 8001ba0:	f36f 238a 	bfc	r3, #10, #1
 8001ba4:	60d3      	str	r3, [r2, #12]

	/*USART6 Transmit  State*/
#if USART6_TRANSMITTER_STATE == Transmitter_Disable
	USART6->CR1.TE = 0;
#elif USART6_TRANSMITTER_STATE == Transmitter_Enable
	USART6->CR1.TE = 1;
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <USART6_Init+0x5c>)
 8001ba8:	68d3      	ldr	r3, [r2, #12]
 8001baa:	f043 0308 	orr.w	r3, r3, #8
 8001bae:	60d3      	str	r3, [r2, #12]

	/*USART6 Receiver State*/
#if USART6_RECEIVER_STATE == Receiver_Disable
	USART6->CR1.RE = 0;
#elif USART6_RECEIVER_STATE == Receiver_Enable
	USART6->CR1.RE = 1;
 8001bb0:	4a07      	ldr	r2, [pc, #28]	; (8001bd0 <USART6_Init+0x5c>)
 8001bb2:	68d3      	ldr	r3, [r2, #12]
 8001bb4:	f043 0304 	orr.w	r3, r3, #4
 8001bb8:	60d3      	str	r3, [r2, #12]
	#error"Undefined Receiver State"
#endif

	/*USART6 State*/
#if USART6_STATE == Usart6_Enable
	USART6->CR1.UE = 1;
 8001bba:	4a05      	ldr	r2, [pc, #20]	; (8001bd0 <USART6_Init+0x5c>)
 8001bbc:	68d3      	ldr	r3, [r2, #12]
 8001bbe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bc2:	60d3      	str	r3, [r2, #12]
#elif USART6_STATE == Usart6_Disable
	USART6->CR1.UE = 0;
#else
	#error"Undefined USART6 State"
#endif
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40011400 	.word	0x40011400

08001bd4 <USART6_TX_InterruptState>:
	default:
		break;
	}
}
void USART6_TX_InterruptState(USART_TX_Int_state TX_INT)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	71fb      	strb	r3, [r7, #7]
	switch(TX_INT)
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d002      	beq.n	8001bea <USART6_TX_InterruptState+0x16>
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d006      	beq.n	8001bf6 <USART6_TX_InterruptState+0x22>
	break;
	case TX_INT_Enable:
		USART6->CR1.TXEIE = 1;
	break;
	default:
		break;
 8001be8:	e00b      	b.n	8001c02 <USART6_TX_InterruptState+0x2e>
		USART6->CR1.TXEIE = 0;
 8001bea:	4a09      	ldr	r2, [pc, #36]	; (8001c10 <USART6_TX_InterruptState+0x3c>)
 8001bec:	68d3      	ldr	r3, [r2, #12]
 8001bee:	f36f 13c7 	bfc	r3, #7, #1
 8001bf2:	60d3      	str	r3, [r2, #12]
	break;
 8001bf4:	e005      	b.n	8001c02 <USART6_TX_InterruptState+0x2e>
		USART6->CR1.TXEIE = 1;
 8001bf6:	4a06      	ldr	r2, [pc, #24]	; (8001c10 <USART6_TX_InterruptState+0x3c>)
 8001bf8:	68d3      	ldr	r3, [r2, #12]
 8001bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bfe:	60d3      	str	r3, [r2, #12]
	break;
 8001c00:	bf00      	nop
	}
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40011400 	.word	0x40011400

08001c14 <USART1_RX_InterruptState>:
void USART1_RX_InterruptState(USART_RX_Int_state RX_INT)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
	switch(RX_INT)
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d002      	beq.n	8001c2a <USART1_RX_InterruptState+0x16>
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d006      	beq.n	8001c36 <USART1_RX_InterruptState+0x22>
	case RX_INT_Enable:
		USART1->CR1.RXNEIE = 1;
	break;

	}
}
 8001c28:	e00b      	b.n	8001c42 <USART1_RX_InterruptState+0x2e>
		USART1->CR1.RXNEIE = 0;
 8001c2a:	4a09      	ldr	r2, [pc, #36]	; (8001c50 <USART1_RX_InterruptState+0x3c>)
 8001c2c:	68d3      	ldr	r3, [r2, #12]
 8001c2e:	f36f 1345 	bfc	r3, #5, #1
 8001c32:	60d3      	str	r3, [r2, #12]
	break;
 8001c34:	e005      	b.n	8001c42 <USART1_RX_InterruptState+0x2e>
		USART1->CR1.RXNEIE = 1;
 8001c36:	4a06      	ldr	r2, [pc, #24]	; (8001c50 <USART1_RX_InterruptState+0x3c>)
 8001c38:	68d3      	ldr	r3, [r2, #12]
 8001c3a:	f043 0320 	orr.w	r3, r3, #32
 8001c3e:	60d3      	str	r3, [r2, #12]
	break;
 8001c40:	bf00      	nop
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40011000 	.word	0x40011000

08001c54 <USART1_ReadDataRegister>:
		ptr_u8Data[Counter] = USART6_ReceiveData();
	}
}

u8 USART1_ReadDataRegister(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
	return USART1->DR;
 8001c58:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <USART1_ReadDataRegister+0x14>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	b2db      	uxtb	r3, r3
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	40011000 	.word	0x40011000

08001c6c <USART1_CallBack>:
		USART6_SendData((u_Number%10)+48);
		u_Number =u_Number /10;
	}
}
void USART1_CallBack(void(*ptr)(void),USART_INT_t Int_Type)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	70fb      	strb	r3, [r7, #3]
	switch(Int_Type)
 8001c78:	78fb      	ldrb	r3, [r7, #3]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d002      	beq.n	8001c84 <USART1_CallBack+0x18>
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d004      	beq.n	8001c8c <USART1_CallBack+0x20>
	case RX_Interrupt:
		USART1_PTR[1]= ptr;

	break;
	}
}
 8001c82:	e007      	b.n	8001c94 <USART1_CallBack+0x28>
		USART1_PTR[0] = ptr;
 8001c84:	4a06      	ldr	r2, [pc, #24]	; (8001ca0 <USART1_CallBack+0x34>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6013      	str	r3, [r2, #0]
	break;
 8001c8a:	e003      	b.n	8001c94 <USART1_CallBack+0x28>
		USART1_PTR[1]= ptr;
 8001c8c:	4a04      	ldr	r2, [pc, #16]	; (8001ca0 <USART1_CallBack+0x34>)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6053      	str	r3, [r2, #4]
	break;
 8001c92:	bf00      	nop
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	20000048 	.word	0x20000048

08001ca4 <USART6_Transmitdata>:

	break;
	}
}
void USART6_Transmitdata(u8 data)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
	transmitter =data;
 8001cae:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <USART6_Transmitdata+0x1c>)
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	7013      	strb	r3, [r2, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	20000050 	.word	0x20000050

08001cc4 <USART6_SendNumberINT>:
void USART6_SendNumberINT(s64 S_Number)
{
 8001cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	e9c7 0102 	strd	r0, r1, [r7, #8]
	u64 u_Number = 1;
 8001cd0:	f04f 0201 	mov.w	r2, #1
 8001cd4:	f04f 0300 	mov.w	r3, #0
 8001cd8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (S_Number == 0)
 8001cdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	d102      	bne.n	8001cea <USART6_SendNumberINT+0x26>
	{
		USART6_Transmitdata('0');
 8001ce4:	2030      	movs	r0, #48	; 0x30
 8001ce6:	f7ff ffdd 	bl	8001ca4 <USART6_Transmitdata>
	}
	if(S_Number < 0)
 8001cea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	da41      	bge.n	8001d76 <USART6_SendNumberINT+0xb2>
	{
		USART6_Transmitdata('0');
 8001cf2:	2030      	movs	r0, #48	; 0x30
 8001cf4:	f7ff ffd6 	bl	8001ca4 <USART6_Transmitdata>
		S_Number *=-1;
 8001cf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	f1d2 0800 	rsbs	r8, r2, #0
 8001d02:	eb61 0903 	sbc.w	r9, r1, r3
 8001d06:	e9c7 8902 	strd	r8, r9, [r7, #8]
	}
	while(S_Number != 0 )
 8001d0a:	e034      	b.n	8001d76 <USART6_SendNumberINT+0xb2>
	{
		u_Number = ((u_Number * 10)+(S_Number % 10));
 8001d0c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001d10:	4642      	mov	r2, r8
 8001d12:	464b      	mov	r3, r9
 8001d14:	f04f 0000 	mov.w	r0, #0
 8001d18:	f04f 0100 	mov.w	r1, #0
 8001d1c:	0099      	lsls	r1, r3, #2
 8001d1e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001d22:	0090      	lsls	r0, r2, #2
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	eb12 0408 	adds.w	r4, r2, r8
 8001d2c:	eb43 0509 	adc.w	r5, r3, r9
 8001d30:	1923      	adds	r3, r4, r4
 8001d32:	603b      	str	r3, [r7, #0]
 8001d34:	eb45 0305 	adc.w	r3, r5, r5
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d3e:	46a0      	mov	r8, r4
 8001d40:	46a9      	mov	r9, r5
 8001d42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d46:	f04f 020a 	mov.w	r2, #10
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	f7fe fd79 	bl	8000844 <__aeabi_ldivmod>
 8001d52:	eb18 0a02 	adds.w	sl, r8, r2
 8001d56:	eb49 0b03 	adc.w	fp, r9, r3
 8001d5a:	e9c7 ab04 	strd	sl, fp, [r7, #16]
		S_Number = S_Number / 10;
 8001d5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d62:	f04f 020a 	mov.w	r2, #10
 8001d66:	f04f 0300 	mov.w	r3, #0
 8001d6a:	f7fe fd6b 	bl	8000844 <__aeabi_ldivmod>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	e9c7 2302 	strd	r2, r3, [r7, #8]
	while(S_Number != 0 )
 8001d76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	d1c6      	bne.n	8001d0c <USART6_SendNumberINT+0x48>
	}
	while(u_Number != 1)
 8001d7e:	e019      	b.n	8001db4 <USART6_SendNumberINT+0xf0>
	{
		USART6_Transmitdata((u_Number%10)+48);
 8001d80:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d84:	f04f 020a 	mov.w	r2, #10
 8001d88:	f04f 0300 	mov.w	r3, #0
 8001d8c:	f7fe fdaa 	bl	80008e4 <__aeabi_uldivmod>
 8001d90:	b2d3      	uxtb	r3, r2
 8001d92:	3330      	adds	r3, #48	; 0x30
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff ff84 	bl	8001ca4 <USART6_Transmitdata>
		u_Number =u_Number /10;
 8001d9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001da0:	f04f 020a 	mov.w	r2, #10
 8001da4:	f04f 0300 	mov.w	r3, #0
 8001da8:	f7fe fd9c 	bl	80008e4 <__aeabi_uldivmod>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	while(u_Number != 1)
 8001db4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001db8:	1e51      	subs	r1, r2, #1
 8001dba:	430b      	orrs	r3, r1
 8001dbc:	d1e0      	bne.n	8001d80 <USART6_SendNumberINT+0xbc>
	}
}
 8001dbe:	bf00      	nop
 8001dc0:	bf00      	nop
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001dcc <USART1_IRQHandler>:
			USART6_Transmitdata(Str[i]);
			i++;
		}
}
void USART1_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
	u8 temp =0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	71fb      	strb	r3, [r7, #7]
	{
		USART1_PTR[0]();
		USART1->DR = temp;
	}
	*/
	if(GET_BIT(USART1->SR,SR_RXNE)==1)
 8001dd6:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <USART1_IRQHandler+0x2c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	095b      	lsrs	r3, r3, #5
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d105      	bne.n	8001df0 <USART1_IRQHandler+0x24>
	{
		USART1_PTR[1]();
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <USART1_IRQHandler+0x30>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	4798      	blx	r3
		temp = USART1->DR;
 8001dea:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <USART1_IRQHandler+0x2c>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	71fb      	strb	r3, [r7, #7]
	}

}
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40011000 	.word	0x40011000
 8001dfc:	20000048 	.word	0x20000048

08001e00 <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
	u8 temp = 0 ;
 8001e06:	2300      	movs	r3, #0
 8001e08:	71fb      	strb	r3, [r7, #7]
	if(GET_BIT(USART6->SR,SR_TXE)==1)
 8001e0a:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <USART6_IRQHandler+0x2c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	09db      	lsrs	r3, r3, #7
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d103      	bne.n	8001e20 <USART6_IRQHandler+0x20>
	{
		USART6->DR =transmitter;
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <USART6_IRQHandler+0x30>)
 8001e1a:	781a      	ldrb	r2, [r3, #0]
 8001e1c:	4b03      	ldr	r3, [pc, #12]	; (8001e2c <USART6_IRQHandler+0x2c>)
 8001e1e:	605a      	str	r2, [r3, #4]
	{
		USART6_PTR[1]();
		temp = USART6->DR;
	}
	*/
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	40011400 	.word	0x40011400
 8001e30:	20000050 	.word	0x20000050

08001e34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e38:	480d      	ldr	r0, [pc, #52]	; (8001e70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e3a:	490e      	ldr	r1, [pc, #56]	; (8001e74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e3c:	4a0e      	ldr	r2, [pc, #56]	; (8001e78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e40:	e002      	b.n	8001e48 <LoopCopyDataInit>

08001e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e46:	3304      	adds	r3, #4

08001e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e4c:	d3f9      	bcc.n	8001e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e4e:	4a0b      	ldr	r2, [pc, #44]	; (8001e7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e50:	4c0b      	ldr	r4, [pc, #44]	; (8001e80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e54:	e001      	b.n	8001e5a <LoopFillZerobss>

08001e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e58:	3204      	adds	r2, #4

08001e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e5c:	d3fb      	bcc.n	8001e56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e5e:	f7ff fdf1 	bl	8001a44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e62:	f000 f811 	bl	8001e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e66:	f7ff fc3d 	bl	80016e4 <main>
  bx  lr    
 8001e6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e6c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e74:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001e78:	08001ef8 	.word	0x08001ef8
  ldr r2, =_sbss
 8001e7c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001e80:	20000054 	.word	0x20000054

08001e84 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e84:	e7fe      	b.n	8001e84 <DMA1_Stream0_IRQHandler>
	...

08001e88 <__libc_init_array>:
 8001e88:	b570      	push	{r4, r5, r6, lr}
 8001e8a:	4d0d      	ldr	r5, [pc, #52]	; (8001ec0 <__libc_init_array+0x38>)
 8001e8c:	4c0d      	ldr	r4, [pc, #52]	; (8001ec4 <__libc_init_array+0x3c>)
 8001e8e:	1b64      	subs	r4, r4, r5
 8001e90:	10a4      	asrs	r4, r4, #2
 8001e92:	2600      	movs	r6, #0
 8001e94:	42a6      	cmp	r6, r4
 8001e96:	d109      	bne.n	8001eac <__libc_init_array+0x24>
 8001e98:	4d0b      	ldr	r5, [pc, #44]	; (8001ec8 <__libc_init_array+0x40>)
 8001e9a:	4c0c      	ldr	r4, [pc, #48]	; (8001ecc <__libc_init_array+0x44>)
 8001e9c:	f000 f818 	bl	8001ed0 <_init>
 8001ea0:	1b64      	subs	r4, r4, r5
 8001ea2:	10a4      	asrs	r4, r4, #2
 8001ea4:	2600      	movs	r6, #0
 8001ea6:	42a6      	cmp	r6, r4
 8001ea8:	d105      	bne.n	8001eb6 <__libc_init_array+0x2e>
 8001eaa:	bd70      	pop	{r4, r5, r6, pc}
 8001eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8001eb0:	4798      	blx	r3
 8001eb2:	3601      	adds	r6, #1
 8001eb4:	e7ee      	b.n	8001e94 <__libc_init_array+0xc>
 8001eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001eba:	4798      	blx	r3
 8001ebc:	3601      	adds	r6, #1
 8001ebe:	e7f2      	b.n	8001ea6 <__libc_init_array+0x1e>
 8001ec0:	08001ef0 	.word	0x08001ef0
 8001ec4:	08001ef0 	.word	0x08001ef0
 8001ec8:	08001ef0 	.word	0x08001ef0
 8001ecc:	08001ef4 	.word	0x08001ef4

08001ed0 <_init>:
 8001ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ed2:	bf00      	nop
 8001ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ed6:	bc08      	pop	{r3}
 8001ed8:	469e      	mov	lr, r3
 8001eda:	4770      	bx	lr

08001edc <_fini>:
 8001edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ede:	bf00      	nop
 8001ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ee2:	bc08      	pop	{r3}
 8001ee4:	469e      	mov	lr, r3
 8001ee6:	4770      	bx	lr
